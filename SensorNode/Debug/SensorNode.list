
SensorNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f10  08004f10  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004f10  08004f10  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f10  08004f10  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f10  08004f10  00014f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f14  08004f14  00014f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000074  08004f8c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08004f8c  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000124be  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002918  00000000  00000000  0003259e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  00034eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df8  00000000  00000000  00036080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a28  00000000  00000000  00036e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000150fd  00000000  00000000  0003a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096161  00000000  00000000  0004f99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005514  00000000  00000000  000e5b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000eb014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004de8 	.word	0x08004de8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004de8 	.word	0x08004de8

0800014c <SAE_J1850_Calc>:
uint8_t CANTxBuffer[] = {0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
uint32_t CANTxMailboxes = CAN_TX_MAILBOX0;
CAN_TxHeaderTypeDef CANTxHeader;

int SAE_J1850_Calc(uint8_t data[], int len)
{
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	int crc, temp1, temp2;
	crc 	= 0;
 8000156:	2300      	movs	r3, #0
 8000158:	61fb      	str	r3, [r7, #28]
	temp1 	= 0;
 800015a:	2300      	movs	r3, #0
 800015c:	61bb      	str	r3, [r7, #24]
	temp2 	= 0;
 800015e:	2300      	movs	r3, #0
 8000160:	60fb      	str	r3, [r7, #12]
	for (int _idx = 0; _idx < len; ++ _idx)
 8000162:	2300      	movs	r3, #0
 8000164:	617b      	str	r3, [r7, #20]
 8000166:	e02b      	b.n	80001c0 <SAE_J1850_Calc+0x74>
	{
		if (0 == _idx)
 8000168:	697b      	ldr	r3, [r7, #20]
 800016a:	2b00      	cmp	r3, #0
 800016c:	d102      	bne.n	8000174 <SAE_J1850_Calc+0x28>
		{
			temp1 = 0;
 800016e:	2300      	movs	r3, #0
 8000170:	61bb      	str	r3, [r7, #24]
 8000172:	e007      	b.n	8000184 <SAE_J1850_Calc+0x38>
		}
		else
		{
			temp1 = data[len - _idx];
 8000174:	683a      	ldr	r2, [r7, #0]
 8000176:	697b      	ldr	r3, [r7, #20]
 8000178:	1ad3      	subs	r3, r2, r3
 800017a:	461a      	mov	r2, r3
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	4413      	add	r3, r2
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	61bb      	str	r3, [r7, #24]
		}
		crc = crc ^ temp1;
 8000184:	69fa      	ldr	r2, [r7, #28]
 8000186:	69bb      	ldr	r3, [r7, #24]
 8000188:	4053      	eors	r3, r2
 800018a:	61fb      	str	r3, [r7, #28]
		for (int _idy = 8; _idy > 0; -- _idy)
 800018c:	2308      	movs	r3, #8
 800018e:	613b      	str	r3, [r7, #16]
 8000190:	e010      	b.n	80001b4 <SAE_J1850_Calc+0x68>
		{
			temp2 = crc;
 8000192:	69fb      	ldr	r3, [r7, #28]
 8000194:	60fb      	str	r3, [r7, #12]
			crc = crc << 1;
 8000196:	69fb      	ldr	r3, [r7, #28]
 8000198:	005b      	lsls	r3, r3, #1
 800019a:	61fb      	str	r3, [r7, #28]
			if (0 != (temp2 & 128))
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d003      	beq.n	80001ae <SAE_J1850_Calc+0x62>
			{
				crc = crc ^ 0x1d;
 80001a6:	69fb      	ldr	r3, [r7, #28]
 80001a8:	f083 031d 	eor.w	r3, r3, #29
 80001ac:	61fb      	str	r3, [r7, #28]
		for (int _idy = 8; _idy > 0; -- _idy)
 80001ae:	693b      	ldr	r3, [r7, #16]
 80001b0:	3b01      	subs	r3, #1
 80001b2:	613b      	str	r3, [r7, #16]
 80001b4:	693b      	ldr	r3, [r7, #16]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	dceb      	bgt.n	8000192 <SAE_J1850_Calc+0x46>
	for (int _idx = 0; _idx < len; ++ _idx)
 80001ba:	697b      	ldr	r3, [r7, #20]
 80001bc:	3301      	adds	r3, #1
 80001be:	617b      	str	r3, [r7, #20]
 80001c0:	697a      	ldr	r2, [r7, #20]
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	429a      	cmp	r2, r3
 80001c6:	dbcf      	blt.n	8000168 <SAE_J1850_Calc+0x1c>
			}
		}
	}
	return crc;
 80001c8:	69fb      	ldr	r3, [r7, #28]
}
 80001ca:	4618      	mov	r0, r3
 80001cc:	3724      	adds	r7, #36	; 0x24
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr

080001d4 <genMessage>:

void genMessage()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	CANTxHeader.StdId 	= CAN_TX_STD_ID;
 80001d8:	4b1c      	ldr	r3, [pc, #112]	; (800024c <genMessage+0x78>)
 80001da:	22a2      	movs	r2, #162	; 0xa2
 80001dc:	601a      	str	r2, [r3, #0]
	CANTxHeader.IDE 	= CAN_ID_STD;
 80001de:	4b1b      	ldr	r3, [pc, #108]	; (800024c <genMessage+0x78>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	609a      	str	r2, [r3, #8]
	CANTxHeader.RTR 	= CAN_RTR_DATA;
 80001e4:	4b19      	ldr	r3, [pc, #100]	; (800024c <genMessage+0x78>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	60da      	str	r2, [r3, #12]
	CANTxHeader.DLC 	= CAN_DATA_LENGTH;
 80001ea:	4b18      	ldr	r3, [pc, #96]	; (800024c <genMessage+0x78>)
 80001ec:	2208      	movs	r2, #8
 80001ee:	611a      	str	r2, [r3, #16]

	CANTxBuffer[0] 		= rand() % 16;
 80001f0:	f003 fdb2 	bl	8003d58 <rand>
 80001f4:	4603      	mov	r3, r0
 80001f6:	425a      	negs	r2, r3
 80001f8:	f003 030f 	and.w	r3, r3, #15
 80001fc:	f002 020f 	and.w	r2, r2, #15
 8000200:	bf58      	it	pl
 8000202:	4253      	negpl	r3, r2
 8000204:	b2da      	uxtb	r2, r3
 8000206:	4b12      	ldr	r3, [pc, #72]	; (8000250 <genMessage+0x7c>)
 8000208:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[1] 		= rand() % 16;
 800020a:	f003 fda5 	bl	8003d58 <rand>
 800020e:	4603      	mov	r3, r0
 8000210:	425a      	negs	r2, r3
 8000212:	f003 030f 	and.w	r3, r3, #15
 8000216:	f002 020f 	and.w	r2, r2, #15
 800021a:	bf58      	it	pl
 800021c:	4253      	negpl	r3, r2
 800021e:	b2da      	uxtb	r2, r3
 8000220:	4b0b      	ldr	r3, [pc, #44]	; (8000250 <genMessage+0x7c>)
 8000222:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[6] 		= (CANTxBuffer[6] + 1)%15;
 8000224:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <genMessage+0x7c>)
 8000226:	799b      	ldrb	r3, [r3, #6]
 8000228:	1c5a      	adds	r2, r3, #1
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <genMessage+0x80>)
 800022c:	fb83 1302 	smull	r1, r3, r3, r2
 8000230:	4413      	add	r3, r2
 8000232:	10d9      	asrs	r1, r3, #3
 8000234:	17d3      	asrs	r3, r2, #31
 8000236:	1ac9      	subs	r1, r1, r3
 8000238:	460b      	mov	r3, r1
 800023a:	011b      	lsls	r3, r3, #4
 800023c:	1a5b      	subs	r3, r3, r1
 800023e:	1ad1      	subs	r1, r2, r3
 8000240:	b2ca      	uxtb	r2, r1
 8000242:	4b03      	ldr	r3, [pc, #12]	; (8000250 <genMessage+0x7c>)
 8000244:	719a      	strb	r2, [r3, #6]
}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	200000b8 	.word	0x200000b8
 8000250:	20000000 	.word	0x20000000
 8000254:	88888889 	.word	0x88888889

08000258 <CAN_Transmit>:

void CAN_Transmit(CAN_HandleTypeDef *hcan)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_AddTxMessage(hcan, &CANTxHeader, CANTxBuffer, &CANTxMailboxes) == HAL_OK)
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <CAN_Transmit+0x2c>)
 8000262:	4a09      	ldr	r2, [pc, #36]	; (8000288 <CAN_Transmit+0x30>)
 8000264:	4909      	ldr	r1, [pc, #36]	; (800028c <CAN_Transmit+0x34>)
 8000266:	6878      	ldr	r0, [r7, #4]
 8000268:	f001 faa1 	bl	80017ae <HAL_CAN_AddTxMessage>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d104      	bne.n	800027c <CAN_Transmit+0x24>
	{
		HAL_GPIO_TogglePin(GPIO_Port, LEDR_Pin);
 8000272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000276:	4806      	ldr	r0, [pc, #24]	; (8000290 <CAN_Transmit+0x38>)
 8000278:	f002 f97c 	bl	8002574 <HAL_GPIO_TogglePin>
	}
}
 800027c:	bf00      	nop
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000008 	.word	0x20000008
 8000288:	20000000 	.word	0x20000000
 800028c:	200000b8 	.word	0x200000b8
 8000290:	40010c00 	.word	0x40010c00

08000294 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &CANRxHeader, CANRxBuffer) != HAL_OK)
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 800029e:	4a0e      	ldr	r2, [pc, #56]	; (80002d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 80002a0:	2101      	movs	r1, #1
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f001 fb52 	bl	800194c <HAL_CAN_GetRxMessage>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
	{
		Error_Handler();
 80002ae:	f000 fb1b 	bl	80008e8 <Error_Handler>
	}

	if (CANRxHeader.StdId == CAN_RX_STD_ID)
 80002b2:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b12      	cmp	r3, #18
 80002b8:	d107      	bne.n	80002ca <HAL_CAN_RxFifo1MsgPendingCallback+0x36>
	{
		CANDataRcvFlag = 1;
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 80002bc:	2201      	movs	r2, #1
 80002be:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIO_Port, LEDG_Pin);
 80002c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002c4:	4806      	ldr	r0, [pc, #24]	; (80002e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 80002c6:	f002 f955 	bl	8002574 <HAL_GPIO_TogglePin>
	}
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000094 	.word	0x20000094
 80002d8:	2000009c 	.word	0x2000009c
 80002dc:	20000090 	.word	0x20000090
 80002e0:	40010c00 	.word	0x40010c00

080002e4 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Callback function for timer2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 if(htim->Instance == htim2.Instance)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d107      	bne.n	8000308 <HAL_TIM_PeriodElapsedCallback+0x24>
 {
   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fc:	4805      	ldr	r0, [pc, #20]	; (8000314 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80002fe:	f002 f939 	bl	8002574 <HAL_GPIO_TogglePin>
   CANDataTxFlag = 1;
 8000302:	4b05      	ldr	r3, [pc, #20]	; (8000318 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000304:	2201      	movs	r2, #1
 8000306:	701a      	strb	r2, [r3, #0]
 }
}
 8000308:	bf00      	nop
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	2000017c 	.word	0x2000017c
 8000314:	40011000 	.word	0x40011000
 8000318:	20000254 	.word	0x20000254

0800031c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000322:	f000 fdc9 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000326:	f000 f86b 	bl	8000400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032a:	f000 fa29 	bl	8000780 <MX_GPIO_Init>
  MX_ADC1_Init();
 800032e:	f000 f8c3 	bl	80004b8 <MX_ADC1_Init>
  MX_CAN_Init();
 8000332:	f000 f8ff 	bl	8000534 <MX_CAN_Init>
  MX_I2C1_Init();
 8000336:	f000 f953 	bl	80005e0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800033a:	f000 f9cd 	bl	80006d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800033e:	f000 f9f5 	bl	800072c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000342:	f000 f97b 	bl	800063c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000346:	4826      	ldr	r0, [pc, #152]	; (80003e0 <main+0xc4>)
 8000348:	f002 ff88 	bl	800325c <HAL_TIM_Base_Start_IT>
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 800034c:	4825      	ldr	r0, [pc, #148]	; (80003e4 <main+0xc8>)
 800034e:	f001 f9ea 	bl	8001726 <HAL_CAN_Start>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <main+0x40>
  {
	  Error_Handler();
 8000358:	f000 fac6 	bl	80008e8 <Error_Handler>
  }
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800035c:	2110      	movs	r1, #16
 800035e:	4821      	ldr	r0, [pc, #132]	; (80003e4 <main+0xc8>)
 8000360:	f001 fc15 	bl	8001b8e <HAL_CAN_ActivateNotification>
  printf("Sensor\n");
 8000364:	4820      	ldr	r0, [pc, #128]	; (80003e8 <main+0xcc>)
 8000366:	f003 fe4b 	bl	8004000 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (CANDataTxFlag == 1)
 800036a:	4b20      	ldr	r3, [pc, #128]	; (80003ec <main+0xd0>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d107      	bne.n	8000382 <main+0x66>
	{
		CANDataTxFlag = 0;
 8000372:	4b1e      	ldr	r3, [pc, #120]	; (80003ec <main+0xd0>)
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
		genMessage();
 8000378:	f7ff ff2c 	bl	80001d4 <genMessage>
		CAN_Transmit(&hcan);
 800037c:	4819      	ldr	r0, [pc, #100]	; (80003e4 <main+0xc8>)
 800037e:	f7ff ff6b 	bl	8000258 <CAN_Transmit>
	}

	if (CANDataRcvFlag == 1)
 8000382:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <main+0xd4>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d1ef      	bne.n	800036a <main+0x4e>
	{
		CANDataRcvFlag = 0;
 800038a:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <main+0xd4>)
 800038c:	2200      	movs	r2, #0
 800038e:	701a      	strb	r2, [r3, #0]
		// Compare data received true
		if ((CANRxBuffer[0] == CANTxBuffer[0]) && (CANRxBuffer[1] == CANTxBuffer[1]))
 8000390:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <main+0xd8>)
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <main+0xdc>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	429a      	cmp	r2, r3
 800039a:	d1e6      	bne.n	800036a <main+0x4e>
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <main+0xd8>)
 800039e:	785a      	ldrb	r2, [r3, #1]
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <main+0xdc>)
 80003a2:	785b      	ldrb	r3, [r3, #1]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d1e0      	bne.n	800036a <main+0x4e>
		{
			if (CANRxBuffer[2] == (CANTxBuffer[0] + CANTxBuffer[1]))
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <main+0xd8>)
 80003aa:	789b      	ldrb	r3, [r3, #2]
 80003ac:	461a      	mov	r2, r3
 80003ae:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <main+0xdc>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	4619      	mov	r1, r3
 80003b4:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <main+0xdc>)
 80003b6:	785b      	ldrb	r3, [r3, #1]
 80003b8:	440b      	add	r3, r1
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d1d5      	bne.n	800036a <main+0x4e>
			{
				// Generate CRC from data received
				uint8_t crc = SAE_J1850_Calc(CANRxBuffer, 7);
 80003be:	2107      	movs	r1, #7
 80003c0:	480c      	ldr	r0, [pc, #48]	; (80003f4 <main+0xd8>)
 80003c2:	f7ff fec3 	bl	800014c <SAE_J1850_Calc>
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]

				// Compare CRC data received and CRC generated
				if (crc == CANRxBuffer[7])
 80003ca:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <main+0xd8>)
 80003cc:	79db      	ldrb	r3, [r3, #7]
 80003ce:	79fa      	ldrb	r2, [r7, #7]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d1ca      	bne.n	800036a <main+0x4e>
				{
					HAL_GPIO_TogglePin(GPIO_Port, LEDB_Pin);
 80003d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d8:	4808      	ldr	r0, [pc, #32]	; (80003fc <main+0xe0>)
 80003da:	f002 f8cb 	bl	8002574 <HAL_GPIO_TogglePin>
	if (CANDataTxFlag == 1)
 80003de:	e7c4      	b.n	800036a <main+0x4e>
 80003e0:	2000017c 	.word	0x2000017c
 80003e4:	20000100 	.word	0x20000100
 80003e8:	08004e00 	.word	0x08004e00
 80003ec:	20000254 	.word	0x20000254
 80003f0:	20000090 	.word	0x20000090
 80003f4:	20000094 	.word	0x20000094
 80003f8:	20000000 	.word	0x20000000
 80003fc:	40010c00 	.word	0x40010c00

08000400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b094      	sub	sp, #80	; 0x50
 8000404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800040a:	2228      	movs	r2, #40	; 0x28
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f003 fed6 	bl	80041c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	f107 0314 	add.w	r3, r7, #20
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000430:	2301      	movs	r3, #1
 8000432:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000438:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043e:	2301      	movs	r3, #1
 8000440:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000442:	2302      	movs	r3, #2
 8000444:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800044a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800044c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000450:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000456:	4618      	mov	r0, r3
 8000458:	f002 f9ea 	bl	8002830 <HAL_RCC_OscConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000462:	f000 fa41 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000466:	230f      	movs	r3, #15
 8000468:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046a:	2302      	movs	r3, #2
 800046c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000476:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	2102      	movs	r1, #2
 8000482:	4618      	mov	r0, r3
 8000484:	f002 fc56 	bl	8002d34 <HAL_RCC_ClockConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800048e:	f000 fa2b 	bl	80008e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000492:	2302      	movs	r3, #2
 8000494:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800049a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	4618      	mov	r0, r3
 80004a0:	f002 fdd6 	bl	8003050 <HAL_RCCEx_PeriphCLKConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80004aa:	f000 fa1d 	bl	80008e8 <Error_Handler>
  }
}
 80004ae:	bf00      	nop
 80004b0:	3750      	adds	r7, #80	; 0x50
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004c8:	4b18      	ldr	r3, [pc, #96]	; (800052c <MX_ADC1_Init+0x74>)
 80004ca:	4a19      	ldr	r2, [pc, #100]	; (8000530 <MX_ADC1_Init+0x78>)
 80004cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ce:	4b17      	ldr	r3, [pc, #92]	; (800052c <MX_ADC1_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004d4:	4b15      	ldr	r3, [pc, #84]	; (800052c <MX_ADC1_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004da:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_ADC1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <MX_ADC1_Init+0x74>)
 80004e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e8:	4b10      	ldr	r3, [pc, #64]	; (800052c <MX_ADC1_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_ADC1_Init+0x74>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <MX_ADC1_Init+0x74>)
 80004f6:	f000 fd41 	bl	8000f7c <HAL_ADC_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000500:	f000 f9f2 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000504:	2304      	movs	r3, #4
 8000506:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000508:	2301      	movs	r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	4619      	mov	r1, r3
 8000514:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_ADC1_Init+0x74>)
 8000516:	f000 fe09 	bl	800112c <HAL_ADC_ConfigChannel>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000520:	f000 f9e2 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200000d0 	.word	0x200000d0
 8000530:	40012400 	.word	0x40012400

08000534 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08a      	sub	sp, #40	; 0x28
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800053a:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <MX_CAN_Init+0xa4>)
 800053c:	4a27      	ldr	r2, [pc, #156]	; (80005dc <MX_CAN_Init+0xa8>)
 800053e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000540:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <MX_CAN_Init+0xa4>)
 8000542:	2204      	movs	r2, #4
 8000544:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000546:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <MX_CAN_Init+0xa4>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <MX_CAN_Init+0xa4>)
 800054e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000552:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000554:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <MX_CAN_Init+0xa4>)
 8000556:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800055a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <MX_CAN_Init+0xa4>)
 800055e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000562:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <MX_CAN_Init+0xa4>)
 8000566:	2200      	movs	r2, #0
 8000568:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800056a:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <MX_CAN_Init+0xa4>)
 800056c:	2200      	movs	r2, #0
 800056e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <MX_CAN_Init+0xa4>)
 8000572:	2200      	movs	r2, #0
 8000574:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <MX_CAN_Init+0xa4>)
 8000578:	2200      	movs	r2, #0
 800057a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800057c:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <MX_CAN_Init+0xa4>)
 800057e:	2200      	movs	r2, #0
 8000580:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_CAN_Init+0xa4>)
 8000584:	2200      	movs	r2, #0
 8000586:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000588:	4813      	ldr	r0, [pc, #76]	; (80005d8 <MX_CAN_Init+0xa4>)
 800058a:	f000 ff08 	bl	800139e <HAL_CAN_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_CAN_Init+0x64>
  {
    Error_Handler();
 8000594:	f000 f9a8 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 12;  // which filter bank to use from the assigned ones
 800059c:	230c      	movs	r3, #12
 800059e:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80005a0:	2301      	movs	r3, #1
 80005a2:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x012<<5;
 80005a4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80005a8:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x012<<5;
 80005ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80005b2:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005bc:	2301      	movs	r3, #1
 80005be:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13;  // how many filters to assign to the CAN1 (master can)
 80005c0:	230d      	movs	r3, #13
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80005c4:	463b      	mov	r3, r7
 80005c6:	4619      	mov	r1, r3
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <MX_CAN_Init+0xa4>)
 80005ca:	f000 ffe3 	bl	8001594 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	3728      	adds	r7, #40	; 0x28
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000100 	.word	0x20000100
 80005dc:	40006400 	.word	0x40006400

080005e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_I2C1_Init+0x50>)
 80005e6:	4a13      	ldr	r2, [pc, #76]	; (8000634 <MX_I2C1_Init+0x54>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_I2C1_Init+0x50>)
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <MX_I2C1_Init+0x58>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_I2C1_Init+0x50>)
 80005fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_I2C1_Init+0x50>)
 800061e:	f001 ffc3 	bl	80025a8 <HAL_I2C_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000628:	f000 f95e 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000128 	.word	0x20000128
 8000634:	40005400 	.word	0x40005400
 8000638:	000186a0 	.word	0x000186a0

0800063c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_TIM2_Init+0x98>)
 800065a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800065e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3599;
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <MX_TIM2_Init+0x98>)
 8000662:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000666:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000668:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_TIM2_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_TIM2_Init+0x98>)
 8000670:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000674:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_TIM2_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_TIM2_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000682:	4814      	ldr	r0, [pc, #80]	; (80006d4 <MX_TIM2_Init+0x98>)
 8000684:	f002 fd9a 	bl	80031bc <HAL_TIM_Base_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800068e:	f000 f92b 	bl	80008e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	4619      	mov	r1, r3
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <MX_TIM2_Init+0x98>)
 80006a0:	f002 ff36 	bl	8003510 <HAL_TIM_ConfigClockSource>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006aa:	f000 f91d 	bl	80008e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ae:	2300      	movs	r3, #0
 80006b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_TIM2_Init+0x98>)
 80006bc:	f003 f90c 	bl	80038d8 <HAL_TIMEx_MasterConfigSynchronization>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006c6:	f000 f90f 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3718      	adds	r7, #24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000017c 	.word	0x2000017c

080006d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_USART1_UART_Init+0x50>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 8000710:	f003 f952 	bl	80039b8 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800071a:	f000 f8e5 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200001c4 	.word	0x200001c4
 8000728:	40013800 	.word	0x40013800

0800072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	; (800077c <MX_USART2_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000764:	f003 f928 	bl	80039b8 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f8bb 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000020c 	.word	0x2000020c
 800077c:	40004400 	.word	0x40004400

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000794:	4b4f      	ldr	r3, [pc, #316]	; (80008d4 <MX_GPIO_Init+0x154>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a4e      	ldr	r2, [pc, #312]	; (80008d4 <MX_GPIO_Init+0x154>)
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b4c      	ldr	r3, [pc, #304]	; (80008d4 <MX_GPIO_Init+0x154>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0310 	and.w	r3, r3, #16
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ac:	4b49      	ldr	r3, [pc, #292]	; (80008d4 <MX_GPIO_Init+0x154>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a48      	ldr	r2, [pc, #288]	; (80008d4 <MX_GPIO_Init+0x154>)
 80007b2:	f043 0320 	orr.w	r3, r3, #32
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b46      	ldr	r3, [pc, #280]	; (80008d4 <MX_GPIO_Init+0x154>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0320 	and.w	r3, r3, #32
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b43      	ldr	r3, [pc, #268]	; (80008d4 <MX_GPIO_Init+0x154>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a42      	ldr	r2, [pc, #264]	; (80008d4 <MX_GPIO_Init+0x154>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b40      	ldr	r3, [pc, #256]	; (80008d4 <MX_GPIO_Init+0x154>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007dc:	4b3d      	ldr	r3, [pc, #244]	; (80008d4 <MX_GPIO_Init+0x154>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a3c      	ldr	r2, [pc, #240]	; (80008d4 <MX_GPIO_Init+0x154>)
 80007e2:	f043 0308 	orr.w	r3, r3, #8
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b3a      	ldr	r3, [pc, #232]	; (80008d4 <MX_GPIO_Init+0x154>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0308 	and.w	r3, r3, #8
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|XSHUT_MCU1_0_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80007fa:	4837      	ldr	r0, [pc, #220]	; (80008d8 <MX_GPIO_Init+0x158>)
 80007fc:	f001 fea2 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDB_Pin|LEDG_Pin|LEDR_Pin|GPIO_PIN_3, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	f641 4108 	movw	r1, #7176	; 0x1c08
 8000806:	4835      	ldr	r0, [pc, #212]	; (80008dc <MX_GPIO_Init+0x15c>)
 8000808:	f001 fe9c 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MPU_BOOT_Pin|MPU_RST_Pin|XSHUT_MCU1_1_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 4141 	mov.w	r1, #49408	; 0xc100
 8000812:	4832      	ldr	r0, [pc, #200]	; (80008dc <MX_GPIO_Init+0x15c>)
 8000814:	f001 fe96 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081e:	4830      	ldr	r0, [pc, #192]	; (80008e0 <MX_GPIO_Init+0x160>)
 8000820:	f001 fe90 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 XSHUT_MCU1_0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|XSHUT_MCU1_0_Pin;
 8000824:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2302      	movs	r3, #2
 8000834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	4619      	mov	r1, r3
 800083c:	4826      	ldr	r0, [pc, #152]	; (80008d8 <MX_GPIO_Init+0x158>)
 800083e:	f001 fcfd 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_MCU1_0_Pin */
  GPIO_InitStruct.Pin = GPIO1_MCU1_0_Pin;
 8000842:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000848:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <MX_GPIO_Init+0x164>)
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO1_MCU1_0_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4619      	mov	r1, r3
 8000856:	4820      	ldr	r0, [pc, #128]	; (80008d8 <MX_GPIO_Init+0x158>)
 8000858:	f001 fcf0 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN1_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN1_Pin;
 800085c:	2303      	movs	r3, #3
 800085e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4619      	mov	r1, r3
 800086e:	481b      	ldr	r0, [pc, #108]	; (80008dc <MX_GPIO_Init+0x15c>)
 8000870:	f001 fce4 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDG_Pin LEDR_Pin MPU_BOOT_Pin
                           MPU_RST_Pin PB3 XSHUT_MCU1_1_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDG_Pin|LEDR_Pin|MPU_BOOT_Pin
 8000874:	f64d 5308 	movw	r3, #56584	; 0xdd08
 8000878:	613b      	str	r3, [r7, #16]
                          |MPU_RST_Pin|GPIO_PIN_3|XSHUT_MCU1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2302      	movs	r3, #2
 8000884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	4619      	mov	r1, r3
 800088c:	4813      	ldr	r0, [pc, #76]	; (80008dc <MX_GPIO_Init+0x15c>)
 800088e:	f001 fcd5 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pins : MPU_INT_Pin GPIO1_MCU1_1_Pin */
  GPIO_InitStruct.Pin = MPU_INT_Pin|GPIO1_MCU1_1_Pin;
 8000892:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_GPIO_Init+0x164>)
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	4619      	mov	r1, r3
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <MX_GPIO_Init+0x15c>)
 80008a8:	f001 fcc8 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80008ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	4619      	mov	r1, r3
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <MX_GPIO_Init+0x160>)
 80008c6:	f001 fcb9 	bl	800223c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ca:	bf00      	nop
 80008cc:	3720      	adds	r7, #32
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40011000 	.word	0x40011000
 80008dc:	40010c00 	.word	0x40010c00
 80008e0:	40010800 	.word	0x40010800
 80008e4:	10110000 	.word	0x10110000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <HAL_MspInit+0x5c>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	4a14      	ldr	r2, [pc, #80]	; (8000950 <HAL_MspInit+0x5c>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6193      	str	r3, [r2, #24]
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_MspInit+0x5c>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <HAL_MspInit+0x5c>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <HAL_MspInit+0x5c>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091c:	61d3      	str	r3, [r2, #28]
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <HAL_MspInit+0x5c>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_MspInit+0x60>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_MspInit+0x60>)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	40021000 	.word	0x40021000
 8000954:	40010000 	.word	0x40010000

08000958 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <HAL_ADC_MspInit+0x6c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d121      	bne.n	80009bc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <HAL_ADC_MspInit+0x70>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <HAL_ADC_MspInit+0x70>)
 800097e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <HAL_ADC_MspInit+0x70>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <HAL_ADC_MspInit+0x70>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a0c      	ldr	r2, [pc, #48]	; (80009c8 <HAL_ADC_MspInit+0x70>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_ADC_MspInit+0x70>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0304 	and.w	r3, r3, #4
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_TEMPT_Pin;
 80009a8:	2310      	movs	r3, #16
 80009aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ac:	2303      	movs	r3, #3
 80009ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_TEMPT_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4619      	mov	r1, r3
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <HAL_ADC_MspInit+0x74>)
 80009b8:	f001 fc40 	bl	800223c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009bc:	bf00      	nop
 80009be:	3720      	adds	r7, #32
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40012400 	.word	0x40012400
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40010800 	.word	0x40010800

080009d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a20      	ldr	r2, [pc, #128]	; (8000a6c <HAL_CAN_MspInit+0x9c>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d139      	bne.n	8000a64 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <HAL_CAN_MspInit+0xa0>)
 80009f2:	69db      	ldr	r3, [r3, #28]
 80009f4:	4a1e      	ldr	r2, [pc, #120]	; (8000a70 <HAL_CAN_MspInit+0xa0>)
 80009f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009fa:	61d3      	str	r3, [r2, #28]
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_CAN_MspInit+0xa0>)
 80009fe:	69db      	ldr	r3, [r3, #28]
 8000a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_CAN_MspInit+0xa0>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a18      	ldr	r2, [pc, #96]	; (8000a70 <HAL_CAN_MspInit+0xa0>)
 8000a0e:	f043 0304 	orr.w	r3, r3, #4
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_CAN_MspInit+0xa0>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4619      	mov	r1, r3
 8000a34:	480f      	ldr	r0, [pc, #60]	; (8000a74 <HAL_CAN_MspInit+0xa4>)
 8000a36:	f001 fc01 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <HAL_CAN_MspInit+0xa4>)
 8000a50:	f001 fbf4 	bl	800223c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2015      	movs	r0, #21
 8000a5a:	f001 fbb8 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000a5e:	2015      	movs	r0, #21
 8000a60:	f001 fbd1 	bl	8002206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40006400 	.word	0x40006400
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010800 	.word	0x40010800

08000a78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a15      	ldr	r2, [pc, #84]	; (8000ae8 <HAL_I2C_MspInit+0x70>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d123      	bne.n	8000ae0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_I2C_MspInit+0x74>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a13      	ldr	r2, [pc, #76]	; (8000aec <HAL_I2C_MspInit+0x74>)
 8000a9e:	f043 0308 	orr.w	r3, r3, #8
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_I2C_MspInit+0x74>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0308 	and.w	r3, r3, #8
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ab0:	23c0      	movs	r3, #192	; 0xc0
 8000ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab4:	2312      	movs	r3, #18
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480b      	ldr	r0, [pc, #44]	; (8000af0 <HAL_I2C_MspInit+0x78>)
 8000ac4:	f001 fbba 	bl	800223c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_I2C_MspInit+0x74>)
 8000aca:	69db      	ldr	r3, [r3, #28]
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_I2C_MspInit+0x74>)
 8000ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ad2:	61d3      	str	r3, [r2, #28]
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_I2C_MspInit+0x74>)
 8000ad6:	69db      	ldr	r3, [r3, #28]
 8000ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ae0:	bf00      	nop
 8000ae2:	3720      	adds	r7, #32
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010c00 	.word	0x40010c00

08000af4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b04:	d113      	bne.n	8000b2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_TIM_Base_MspInit+0x44>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <HAL_TIM_Base_MspInit+0x44>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_TIM_Base_MspInit+0x44>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	201c      	movs	r0, #28
 8000b24:	f001 fb53 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b28:	201c      	movs	r0, #28
 8000b2a:	f001 fb6c 	bl	8002206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0318 	add.w	r3, r7, #24
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a37      	ldr	r2, [pc, #220]	; (8000c34 <HAL_UART_MspInit+0xf8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d132      	bne.n	8000bc2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b5c:	4b36      	ldr	r3, [pc, #216]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a35      	ldr	r2, [pc, #212]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a2f      	ldr	r2, [pc, #188]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0318 	add.w	r3, r7, #24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4826      	ldr	r0, [pc, #152]	; (8000c3c <HAL_UART_MspInit+0x100>)
 8000ba2:	f001 fb4b 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 0318 	add.w	r3, r7, #24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4820      	ldr	r0, [pc, #128]	; (8000c3c <HAL_UART_MspInit+0x100>)
 8000bbc:	f001 fb3e 	bl	800223c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bc0:	e034      	b.n	8000c2c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <HAL_UART_MspInit+0x104>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d12f      	bne.n	8000c2c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000bce:	69db      	ldr	r3, [r3, #28]
 8000bd0:	4a19      	ldr	r2, [pc, #100]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd6:	61d3      	str	r3, [r2, #28]
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000bda:	69db      	ldr	r3, [r3, #28]
 8000bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 0318 	add.w	r3, r7, #24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480b      	ldr	r0, [pc, #44]	; (8000c3c <HAL_UART_MspInit+0x100>)
 8000c10:	f001 fb14 	bl	800223c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c14:	2308      	movs	r3, #8
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	4619      	mov	r1, r3
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <HAL_UART_MspInit+0x100>)
 8000c28:	f001 fb08 	bl	800223c <HAL_GPIO_Init>
}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40013800 	.word	0x40013800
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010800 	.word	0x40010800
 8000c40:	40004400 	.word	0x40004400

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr

08000c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr

08000c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8a:	f000 f95b 	bl	8000f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <CAN1_RX1_IRQHandler+0x10>)
 8000c9a:	f000 ff9d 	bl	8001bd8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000100 	.word	0x20000100

08000ca8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <TIM2_IRQHandler+0x10>)
 8000cae:	f002 fb27 	bl	8003300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000017c 	.word	0x2000017c

08000cbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return 1;
 8000cc0:	2301      	movs	r3, #1
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr

08000cca <_kill>:

int _kill(int pid, int sig)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cd4:	f003 fac2 	bl	800425c <__errno>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2216      	movs	r2, #22
 8000cdc:	601a      	str	r2, [r3, #0]
  return -1;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_exit>:

void _exit (int status)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ffe7 	bl	8000cca <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cfc:	e7fe      	b.n	8000cfc <_exit+0x12>

08000cfe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	e00a      	b.n	8000d26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d10:	f3af 8000 	nop.w
 8000d14:	4601      	mov	r1, r0
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	1c5a      	adds	r2, r3, #1
 8000d1a:	60ba      	str	r2, [r7, #8]
 8000d1c:	b2ca      	uxtb	r2, r1
 8000d1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3301      	adds	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dbf0      	blt.n	8000d10 <_read+0x12>
  }

  return len;
 8000d2e:	687b      	ldr	r3, [r7, #4]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	e009      	b.n	8000d5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	60ba      	str	r2, [r7, #8]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f878 	bl	8000e48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	dbf1      	blt.n	8000d4a <_write+0x12>
  }
  return len;
 8000d66:	687b      	ldr	r3, [r7, #4]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <_close>:

int _close(int file)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr

08000d86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d96:	605a      	str	r2, [r3, #4]
  return 0;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <_isatty>:

int _isatty(int file)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dac:	2301      	movs	r3, #1
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f003 fa2c 	bl	800425c <__errno>
 8000e04:	4603      	mov	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20005000 	.word	0x20005000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	20000258 	.word	0x20000258
 8000e38:	200003b0 	.word	0x200003b0

08000e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e50:	1d39      	adds	r1, r7, #4
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	2201      	movs	r2, #1
 8000e58:	4803      	ldr	r0, [pc, #12]	; (8000e68 <__io_putchar+0x20>)
 8000e5a:	f002 fdfd 	bl	8003a58 <HAL_UART_Transmit>
	return ch;
 8000e5e:	687b      	ldr	r3, [r7, #4]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200001c4 	.word	0x200001c4

08000e6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e6c:	f7ff ffe6 	bl	8000e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e70:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e72:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e74:	4a0c      	ldr	r2, [pc, #48]	; (8000ea8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a09      	ldr	r2, [pc, #36]	; (8000eac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e88:	4c09      	ldr	r4, [pc, #36]	; (8000eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e96:	f003 f9e7 	bl	8004268 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e9a:	f7ff fa3f 	bl	800031c <main>
  bx lr
 8000e9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ea8:	08004f18 	.word	0x08004f18
  ldr r2, =_sbss
 8000eac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000eb0:	200003ac 	.word	0x200003ac

08000eb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC1_2_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_Init+0x28>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_Init+0x28>)
 8000ec2:	f043 0310 	orr.w	r3, r3, #16
 8000ec6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f001 f975 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f000 f808 	bl	8000ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed4:	f7ff fd0e 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40022000 	.word	0x40022000

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x54>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 f98d 	bl	8002222 <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00e      	b.n	8000f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d80a      	bhi.n	8000f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f001 f955 	bl	80021ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f24:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <HAL_InitTick+0x5c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e000      	b.n	8000f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000000c 	.word	0x2000000c
 8000f3c:	20000014 	.word	0x20000014
 8000f40:	20000010 	.word	0x20000010

08000f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_IncTick+0x1c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_IncTick+0x20>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <HAL_IncTick+0x20>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	20000014 	.word	0x20000014
 8000f64:	2000025c 	.word	0x2000025c

08000f68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b02      	ldr	r3, [pc, #8]	; (8000f78 <HAL_GetTick+0x10>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	2000025c 	.word	0x2000025c

08000f7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e0be      	b.n	800111c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d109      	bne.n	8000fc0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff fccc 	bl	8000958 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f9ab 	bl	800131c <ADC_ConversionStop_Disable>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f040 8099 	bne.w	800110a <HAL_ADC_Init+0x18e>
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f040 8095 	bne.w	800110a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fe8:	f023 0302 	bic.w	r3, r3, #2
 8000fec:	f043 0202 	orr.w	r2, r3, #2
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ffc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7b1b      	ldrb	r3, [r3, #12]
 8001002:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001004:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	4313      	orrs	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001014:	d003      	beq.n	800101e <HAL_ADC_Init+0xa2>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d102      	bne.n	8001024 <HAL_ADC_Init+0xa8>
 800101e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001022:	e000      	b.n	8001026 <HAL_ADC_Init+0xaa>
 8001024:	2300      	movs	r3, #0
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7d1b      	ldrb	r3, [r3, #20]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d119      	bne.n	8001068 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d109      	bne.n	8001050 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	3b01      	subs	r3, #1
 8001042:	035a      	lsls	r2, r3, #13
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	e00b      	b.n	8001068 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001054:	f043 0220 	orr.w	r2, r3, #32
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001060:	f043 0201 	orr.w	r2, r3, #1
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	430a      	orrs	r2, r1
 800107a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <HAL_ADC_Init+0x1a8>)
 8001084:	4013      	ands	r3, r2
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	430b      	orrs	r3, r1
 800108e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001098:	d003      	beq.n	80010a2 <HAL_ADC_Init+0x126>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d104      	bne.n	80010ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	051b      	lsls	r3, r3, #20
 80010aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	430a      	orrs	r2, r1
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_ADC_Init+0x1ac>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d10b      	bne.n	80010e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010da:	f023 0303 	bic.w	r3, r3, #3
 80010de:	f043 0201 	orr.w	r2, r3, #1
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010e6:	e018      	b.n	800111a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	f023 0312 	bic.w	r3, r3, #18
 80010f0:	f043 0210 	orr.w	r2, r3, #16
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fc:	f043 0201 	orr.w	r2, r3, #1
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001108:	e007      	b.n	800111a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110e:	f043 0210 	orr.w	r2, r3, #16
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800111a:	7dfb      	ldrb	r3, [r7, #23]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	ffe1f7fd 	.word	0xffe1f7fd
 8001128:	ff1f0efe 	.word	0xff1f0efe

0800112c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <HAL_ADC_ConfigChannel+0x20>
 8001148:	2302      	movs	r3, #2
 800114a:	e0dc      	b.n	8001306 <HAL_ADC_ConfigChannel+0x1da>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b06      	cmp	r3, #6
 800115a:	d81c      	bhi.n	8001196 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	3b05      	subs	r3, #5
 800116e:	221f      	movs	r2, #31
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	4019      	ands	r1, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	3b05      	subs	r3, #5
 8001188:	fa00 f203 	lsl.w	r2, r0, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	635a      	str	r2, [r3, #52]	; 0x34
 8001194:	e03c      	b.n	8001210 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b0c      	cmp	r3, #12
 800119c:	d81c      	bhi.n	80011d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	3b23      	subs	r3, #35	; 0x23
 80011b0:	221f      	movs	r2, #31
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	4019      	ands	r1, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	3b23      	subs	r3, #35	; 0x23
 80011ca:	fa00 f203 	lsl.w	r2, r0, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
 80011d6:	e01b      	b.n	8001210 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	3b41      	subs	r3, #65	; 0x41
 80011ea:	221f      	movs	r2, #31
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	4019      	ands	r1, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	3b41      	subs	r3, #65	; 0x41
 8001204:	fa00 f203 	lsl.w	r2, r0, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b09      	cmp	r3, #9
 8001216:	d91c      	bls.n	8001252 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68d9      	ldr	r1, [r3, #12]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	3b1e      	subs	r3, #30
 800122a:	2207      	movs	r2, #7
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	4019      	ands	r1, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	6898      	ldr	r0, [r3, #8]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	3b1e      	subs	r3, #30
 8001244:	fa00 f203 	lsl.w	r2, r0, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	e019      	b.n	8001286 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6919      	ldr	r1, [r3, #16]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	2207      	movs	r2, #7
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	4019      	ands	r1, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	6898      	ldr	r0, [r3, #8]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	fa00 f203 	lsl.w	r2, r0, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b10      	cmp	r3, #16
 800128c:	d003      	beq.n	8001296 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001292:	2b11      	cmp	r3, #17
 8001294:	d132      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <HAL_ADC_ConfigChannel+0x1e4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d125      	bne.n	80012ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d126      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b10      	cmp	r3, #16
 80012c4:	d11a      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_ADC_ConfigChannel+0x1e8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a13      	ldr	r2, [pc, #76]	; (8001318 <HAL_ADC_ConfigChannel+0x1ec>)
 80012cc:	fba2 2303 	umull	r2, r3, r2, r3
 80012d0:	0c9a      	lsrs	r2, r3, #18
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012dc:	e002      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f9      	bne.n	80012de <HAL_ADC_ConfigChannel+0x1b2>
 80012ea:	e007      	b.n	80012fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f0:	f043 0220 	orr.w	r2, r3, #32
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	40012400 	.word	0x40012400
 8001314:	2000000c 	.word	0x2000000c
 8001318:	431bde83 	.word	0x431bde83

0800131c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b01      	cmp	r3, #1
 8001334:	d12e      	bne.n	8001394 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0201 	bic.w	r2, r2, #1
 8001344:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001346:	f7ff fe0f 	bl	8000f68 <HAL_GetTick>
 800134a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800134c:	e01b      	b.n	8001386 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800134e:	f7ff fe0b 	bl	8000f68 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d914      	bls.n	8001386 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b01      	cmp	r3, #1
 8001368:	d10d      	bne.n	8001386 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136e:	f043 0210 	orr.w	r2, r3, #16
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137a:	f043 0201 	orr.w	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e007      	b.n	8001396 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b01      	cmp	r3, #1
 8001392:	d0dc      	beq.n	800134e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0ed      	b.n	800158c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fb07 	bl	80009d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0201 	orr.w	r2, r2, #1
 80013d0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d2:	f7ff fdc9 	bl	8000f68 <HAL_GetTick>
 80013d6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013d8:	e012      	b.n	8001400 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013da:	f7ff fdc5 	bl	8000f68 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b0a      	cmp	r3, #10
 80013e6:	d90b      	bls.n	8001400 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2205      	movs	r2, #5
 80013f8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e0c5      	b.n	800158c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0e5      	beq.n	80013da <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 0202 	bic.w	r2, r2, #2
 800141c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800141e:	f7ff fda3 	bl	8000f68 <HAL_GetTick>
 8001422:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001424:	e012      	b.n	800144c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001426:	f7ff fd9f 	bl	8000f68 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b0a      	cmp	r3, #10
 8001432:	d90b      	bls.n	800144c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2205      	movs	r2, #5
 8001444:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e09f      	b.n	800158c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1e5      	bne.n	8001426 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7e1b      	ldrb	r3, [r3, #24]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d108      	bne.n	8001474 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	e007      	b.n	8001484 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001482:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7e5b      	ldrb	r3, [r3, #25]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d108      	bne.n	800149e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e007      	b.n	80014ae <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7e9b      	ldrb	r3, [r3, #26]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d108      	bne.n	80014c8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0220 	orr.w	r2, r2, #32
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	e007      	b.n	80014d8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0220 	bic.w	r2, r2, #32
 80014d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7edb      	ldrb	r3, [r3, #27]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d108      	bne.n	80014f2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0210 	bic.w	r2, r2, #16
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	e007      	b.n	8001502 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 0210 	orr.w	r2, r2, #16
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7f1b      	ldrb	r3, [r3, #28]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d108      	bne.n	800151c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0208 	orr.w	r2, r2, #8
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	e007      	b.n	800152c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0208 	bic.w	r2, r2, #8
 800152a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7f5b      	ldrb	r3, [r3, #29]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d108      	bne.n	8001546 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0204 	orr.w	r2, r2, #4
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	e007      	b.n	8001556 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0204 	bic.w	r2, r2, #4
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	ea42 0103 	orr.w	r1, r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	1e5a      	subs	r2, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015aa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80015ac:	7cfb      	ldrb	r3, [r7, #19]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d003      	beq.n	80015ba <HAL_CAN_ConfigFilter+0x26>
 80015b2:	7cfb      	ldrb	r3, [r7, #19]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	f040 80aa 	bne.w	800170e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015c0:	f043 0201 	orr.w	r2, r3, #1
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	2201      	movs	r2, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	401a      	ands	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d123      	bne.n	800163c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	401a      	ands	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001616:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	3248      	adds	r2, #72	; 0x48
 800161c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001630:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001632:	6979      	ldr	r1, [r7, #20]
 8001634:	3348      	adds	r3, #72	; 0x48
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	440b      	add	r3, r1
 800163a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d122      	bne.n	800168a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	431a      	orrs	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001664:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3248      	adds	r2, #72	; 0x48
 800166a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800167e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001680:	6979      	ldr	r1, [r7, #20]
 8001682:	3348      	adds	r3, #72	; 0x48
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d109      	bne.n	80016a6 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	43db      	mvns	r3, r3
 800169c:	401a      	ands	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80016a4:	e007      	b.n	80016b6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	401a      	ands	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80016d0:	e007      	b.n	80016e2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	431a      	orrs	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d107      	bne.n	80016fa <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001700:	f023 0201 	bic.w	r2, r3, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e006      	b.n	800171c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
  }
}
 800171c:	4618      	mov	r0, r3
 800171e:	371c      	adds	r7, #28
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b01      	cmp	r3, #1
 8001738:	d12e      	bne.n	8001798 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2202      	movs	r2, #2
 800173e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001752:	f7ff fc09 	bl	8000f68 <HAL_GetTick>
 8001756:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001758:	e012      	b.n	8001780 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800175a:	f7ff fc05 	bl	8000f68 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b0a      	cmp	r3, #10
 8001766:	d90b      	bls.n	8001780 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2205      	movs	r2, #5
 8001778:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e012      	b.n	80017a6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1e5      	bne.n	800175a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	e006      	b.n	80017a6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
  }
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b089      	sub	sp, #36	; 0x24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80017cc:	7ffb      	ldrb	r3, [r7, #31]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d003      	beq.n	80017da <HAL_CAN_AddTxMessage+0x2c>
 80017d2:	7ffb      	ldrb	r3, [r7, #31]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	f040 80ad 	bne.w	8001934 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10a      	bne.n	80017fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d105      	bne.n	80017fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8095 	beq.w	8001924 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	0e1b      	lsrs	r3, r3, #24
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001804:	2201      	movs	r2, #1
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	409a      	lsls	r2, r3
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10d      	bne.n	8001832 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001820:	68f9      	ldr	r1, [r7, #12]
 8001822:	6809      	ldr	r1, [r1, #0]
 8001824:	431a      	orrs	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3318      	adds	r3, #24
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	440b      	add	r3, r1
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	e00f      	b.n	8001852 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800183c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001842:	68f9      	ldr	r1, [r7, #12]
 8001844:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001846:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3318      	adds	r3, #24
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	440b      	add	r3, r1
 8001850:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6819      	ldr	r1, [r3, #0]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	691a      	ldr	r2, [r3, #16]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3318      	adds	r3, #24
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	440b      	add	r3, r1
 8001862:	3304      	adds	r3, #4
 8001864:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	7d1b      	ldrb	r3, [r3, #20]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d111      	bne.n	8001892 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	3318      	adds	r3, #24
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	4413      	add	r3, r2
 800187a:	3304      	adds	r3, #4
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	6811      	ldr	r1, [r2, #0]
 8001882:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3318      	adds	r3, #24
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	440b      	add	r3, r1
 800188e:	3304      	adds	r3, #4
 8001890:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3307      	adds	r3, #7
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	061a      	lsls	r2, r3, #24
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3306      	adds	r3, #6
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	041b      	lsls	r3, r3, #16
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3305      	adds	r3, #5
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	4313      	orrs	r3, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	3204      	adds	r2, #4
 80018b2:	7812      	ldrb	r2, [r2, #0]
 80018b4:	4610      	mov	r0, r2
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	6811      	ldr	r1, [r2, #0]
 80018ba:	ea43 0200 	orr.w	r2, r3, r0
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	440b      	add	r3, r1
 80018c4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80018c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3303      	adds	r3, #3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	061a      	lsls	r2, r3, #24
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3302      	adds	r3, #2
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	041b      	lsls	r3, r3, #16
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3301      	adds	r3, #1
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	4313      	orrs	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	7812      	ldrb	r2, [r2, #0]
 80018ea:	4610      	mov	r0, r2
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	6811      	ldr	r1, [r2, #0]
 80018f0:	ea43 0200 	orr.w	r2, r3, r0
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	440b      	add	r3, r1
 80018fa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80018fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3318      	adds	r3, #24
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	4413      	add	r3, r2
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	6811      	ldr	r1, [r2, #0]
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3318      	adds	r3, #24
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	440b      	add	r3, r1
 800191e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	e00e      	b.n	8001942 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e006      	b.n	8001942 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
  }
}
 8001942:	4618      	mov	r0, r3
 8001944:	3724      	adds	r7, #36	; 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001960:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001962:	7dfb      	ldrb	r3, [r7, #23]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d003      	beq.n	8001970 <HAL_CAN_GetRxMessage+0x24>
 8001968:	7dfb      	ldrb	r3, [r7, #23]
 800196a:	2b02      	cmp	r3, #2
 800196c:	f040 8103 	bne.w	8001b76 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10e      	bne.n	8001994 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d116      	bne.n	80019b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0f7      	b.n	8001b84 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d107      	bne.n	80019b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e0e8      	b.n	8001b84 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	331b      	adds	r3, #27
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	4413      	add	r3, r2
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0204 	and.w	r2, r3, #4
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10c      	bne.n	80019ea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	331b      	adds	r3, #27
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	4413      	add	r3, r2
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	0d5b      	lsrs	r3, r3, #21
 80019e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	e00b      	b.n	8001a02 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	331b      	adds	r3, #27
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	4413      	add	r3, r2
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	08db      	lsrs	r3, r3, #3
 80019fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	331b      	adds	r3, #27
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	4413      	add	r3, r2
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0202 	and.w	r2, r3, #2
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	331b      	adds	r3, #27
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	4413      	add	r3, r2
 8001a24:	3304      	adds	r3, #4
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2208      	movs	r2, #8
 8001a34:	611a      	str	r2, [r3, #16]
 8001a36:	e00b      	b.n	8001a50 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	331b      	adds	r3, #27
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	4413      	add	r3, r2
 8001a44:	3304      	adds	r3, #4
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 020f 	and.w	r2, r3, #15
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	331b      	adds	r3, #27
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	331b      	adds	r3, #27
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	4413      	add	r3, r2
 8001a74:	3304      	adds	r3, #4
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0c1b      	lsrs	r3, r3, #16
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	0a1a      	lsrs	r2, r3, #8
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	4413      	add	r3, r2
 8001aba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	0c1a      	lsrs	r2, r3, #16
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	0e1a      	lsrs	r2, r3, #24
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	3303      	adds	r3, #3
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	3304      	adds	r3, #4
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0a1a      	lsrs	r2, r3, #8
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	3305      	adds	r3, #5
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	4413      	add	r3, r2
 8001b20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	0c1a      	lsrs	r2, r3, #16
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	3306      	adds	r3, #6
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0e1a      	lsrs	r2, r3, #24
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	3307      	adds	r3, #7
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d108      	bne.n	8001b62 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0220 	orr.w	r2, r2, #32
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	e007      	b.n	8001b72 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0220 	orr.w	r2, r2, #32
 8001b70:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e006      	b.n	8001b84 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
  }
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	371c      	adds	r7, #28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b085      	sub	sp, #20
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b9e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d002      	beq.n	8001bac <HAL_CAN_ActivateNotification+0x1e>
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d109      	bne.n	8001bc0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6959      	ldr	r1, [r3, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e006      	b.n	8001bce <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
  }
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d07c      	beq.n	8001d18 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d023      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f983 	bl	8001f46 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c40:	e016      	b.n	8001c70 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d004      	beq.n	8001c56 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
 8001c54:	e00c      	b.n	8001c70 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d004      	beq.n	8001c6a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
 8001c68:	e002      	b.n	8001c70 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f986 	bl	8001f7c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d024      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f962 	bl	8001f58 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c94:	e016      	b.n	8001cc4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d004      	beq.n	8001caa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca8:	e00c      	b.n	8001cc4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d004      	beq.n	8001cbe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbc:	e002      	b.n	8001cc4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f965 	bl	8001f8e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d024      	beq.n	8001d18 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cd6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f941 	bl	8001f6a <HAL_CAN_TxMailbox2CompleteCallback>
 8001ce8:	e016      	b.n	8001d18 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d004      	beq.n	8001cfe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfc:	e00c      	b.n	8001d18 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d004      	beq.n	8001d12 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d10:	e002      	b.n	8001d18 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f944 	bl	8001fa0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00c      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d007      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2210      	movs	r2, #16
 8001d3a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00b      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2208      	movs	r2, #8
 8001d56:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f933 	bl	8001fc4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d009      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f91b 	bl	8001fb2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00c      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2210      	movs	r2, #16
 8001d9e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	f003 0320 	and.w	r3, r3, #32
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00b      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2208      	movs	r2, #8
 8001dba:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f90a 	bl	8001fd6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d009      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7fe fa5a 	bl	8000294 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00b      	beq.n	8001e02 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2210      	movs	r2, #16
 8001dfa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f8f3 	bl	8001fe8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00b      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f8eb 	bl	8001ffa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d07b      	beq.n	8001f26 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d072      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d008      	beq.n	8001e70 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d043      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d03e      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ea6:	2b60      	cmp	r3, #96	; 0x60
 8001ea8:	d02b      	beq.n	8001f02 <HAL_CAN_IRQHandler+0x32a>
 8001eaa:	2b60      	cmp	r3, #96	; 0x60
 8001eac:	d82e      	bhi.n	8001f0c <HAL_CAN_IRQHandler+0x334>
 8001eae:	2b50      	cmp	r3, #80	; 0x50
 8001eb0:	d022      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x320>
 8001eb2:	2b50      	cmp	r3, #80	; 0x50
 8001eb4:	d82a      	bhi.n	8001f0c <HAL_CAN_IRQHandler+0x334>
 8001eb6:	2b40      	cmp	r3, #64	; 0x40
 8001eb8:	d019      	beq.n	8001eee <HAL_CAN_IRQHandler+0x316>
 8001eba:	2b40      	cmp	r3, #64	; 0x40
 8001ebc:	d826      	bhi.n	8001f0c <HAL_CAN_IRQHandler+0x334>
 8001ebe:	2b30      	cmp	r3, #48	; 0x30
 8001ec0:	d010      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x30c>
 8001ec2:	2b30      	cmp	r3, #48	; 0x30
 8001ec4:	d822      	bhi.n	8001f0c <HAL_CAN_IRQHandler+0x334>
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	d002      	beq.n	8001ed0 <HAL_CAN_IRQHandler+0x2f8>
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	d005      	beq.n	8001eda <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ece:	e01d      	b.n	8001f0c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	f043 0308 	orr.w	r3, r3, #8
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ed8:	e019      	b.n	8001f0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	f043 0310 	orr.w	r3, r3, #16
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ee2:	e014      	b.n	8001f0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	f043 0320 	orr.w	r3, r3, #32
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eec:	e00f      	b.n	8001f0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ef6:	e00a      	b.n	8001f0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f00:	e005      	b.n	8001f0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f0a:	e000      	b.n	8001f0e <HAL_CAN_IRQHandler+0x336>
            break;
 8001f0c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699a      	ldr	r2, [r3, #24]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f1c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2204      	movs	r2, #4
 8001f24:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f867 	bl	800200c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f3e:	bf00      	nop
 8001f40:	3728      	adds	r7, #40	; 0x28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
	...

08002020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800204c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	2b00      	cmp	r3, #0
 8002094:	db0b      	blt.n	80020ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	4906      	ldr	r1, [pc, #24]	; (80020b8 <__NVIC_EnableIRQ+0x34>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	2001      	movs	r0, #1
 80020a6:	fa00 f202 	lsl.w	r2, r0, r2
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100

080020bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	db0a      	blt.n	80020e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	490c      	ldr	r1, [pc, #48]	; (8002108 <__NVIC_SetPriority+0x4c>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	440b      	add	r3, r1
 80020e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e4:	e00a      	b.n	80020fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4908      	ldr	r1, [pc, #32]	; (800210c <__NVIC_SetPriority+0x50>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3b04      	subs	r3, #4
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	440b      	add	r3, r1
 80020fa:	761a      	strb	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f1c3 0307 	rsb	r3, r3, #7
 800212a:	2b04      	cmp	r3, #4
 800212c:	bf28      	it	cs
 800212e:	2304      	movcs	r3, #4
 8002130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3304      	adds	r3, #4
 8002136:	2b06      	cmp	r3, #6
 8002138:	d902      	bls.n	8002140 <NVIC_EncodePriority+0x30>
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3b03      	subs	r3, #3
 800213e:	e000      	b.n	8002142 <NVIC_EncodePriority+0x32>
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	401a      	ands	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002158:	f04f 31ff 	mov.w	r1, #4294967295
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43d9      	mvns	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	4313      	orrs	r3, r2
         );
}
 800216a:	4618      	mov	r0, r3
 800216c:	3724      	adds	r7, #36	; 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002184:	d301      	bcc.n	800218a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002186:	2301      	movs	r3, #1
 8002188:	e00f      	b.n	80021aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218a:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <SysTick_Config+0x40>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002192:	210f      	movs	r1, #15
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	f7ff ff90 	bl	80020bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <SysTick_Config+0x40>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <SysTick_Config+0x40>)
 80021a4:	2207      	movs	r2, #7
 80021a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	e000e010 	.word	0xe000e010

080021b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff2d 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e0:	f7ff ff42 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7ff ff90 	bl	8002110 <NVIC_EncodePriority>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff5f 	bl	80020bc <__NVIC_SetPriority>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff35 	bl	8002084 <__NVIC_EnableIRQ>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ffa2 	bl	8002174 <SysTick_Config>
 8002230:	4603      	mov	r3, r0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800223c:	b480      	push	{r7}
 800223e:	b08b      	sub	sp, #44	; 0x2c
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002246:	2300      	movs	r3, #0
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224e:	e169      	b.n	8002524 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002250:	2201      	movs	r2, #1
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	429a      	cmp	r2, r3
 800226a:	f040 8158 	bne.w	800251e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4a9a      	ldr	r2, [pc, #616]	; (80024dc <HAL_GPIO_Init+0x2a0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d05e      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 8002278:	4a98      	ldr	r2, [pc, #608]	; (80024dc <HAL_GPIO_Init+0x2a0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d875      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 800227e:	4a98      	ldr	r2, [pc, #608]	; (80024e0 <HAL_GPIO_Init+0x2a4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d058      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 8002284:	4a96      	ldr	r2, [pc, #600]	; (80024e0 <HAL_GPIO_Init+0x2a4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d86f      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 800228a:	4a96      	ldr	r2, [pc, #600]	; (80024e4 <HAL_GPIO_Init+0x2a8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d052      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 8002290:	4a94      	ldr	r2, [pc, #592]	; (80024e4 <HAL_GPIO_Init+0x2a8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d869      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 8002296:	4a94      	ldr	r2, [pc, #592]	; (80024e8 <HAL_GPIO_Init+0x2ac>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d04c      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 800229c:	4a92      	ldr	r2, [pc, #584]	; (80024e8 <HAL_GPIO_Init+0x2ac>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d863      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 80022a2:	4a92      	ldr	r2, [pc, #584]	; (80024ec <HAL_GPIO_Init+0x2b0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d046      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 80022a8:	4a90      	ldr	r2, [pc, #576]	; (80024ec <HAL_GPIO_Init+0x2b0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d85d      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 80022ae:	2b12      	cmp	r3, #18
 80022b0:	d82a      	bhi.n	8002308 <HAL_GPIO_Init+0xcc>
 80022b2:	2b12      	cmp	r3, #18
 80022b4:	d859      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <HAL_GPIO_Init+0x80>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	08002337 	.word	0x08002337
 80022c0:	08002311 	.word	0x08002311
 80022c4:	08002323 	.word	0x08002323
 80022c8:	08002365 	.word	0x08002365
 80022cc:	0800236b 	.word	0x0800236b
 80022d0:	0800236b 	.word	0x0800236b
 80022d4:	0800236b 	.word	0x0800236b
 80022d8:	0800236b 	.word	0x0800236b
 80022dc:	0800236b 	.word	0x0800236b
 80022e0:	0800236b 	.word	0x0800236b
 80022e4:	0800236b 	.word	0x0800236b
 80022e8:	0800236b 	.word	0x0800236b
 80022ec:	0800236b 	.word	0x0800236b
 80022f0:	0800236b 	.word	0x0800236b
 80022f4:	0800236b 	.word	0x0800236b
 80022f8:	0800236b 	.word	0x0800236b
 80022fc:	0800236b 	.word	0x0800236b
 8002300:	08002319 	.word	0x08002319
 8002304:	0800232d 	.word	0x0800232d
 8002308:	4a79      	ldr	r2, [pc, #484]	; (80024f0 <HAL_GPIO_Init+0x2b4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800230e:	e02c      	b.n	800236a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	623b      	str	r3, [r7, #32]
          break;
 8002316:	e029      	b.n	800236c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	3304      	adds	r3, #4
 800231e:	623b      	str	r3, [r7, #32]
          break;
 8002320:	e024      	b.n	800236c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	3308      	adds	r3, #8
 8002328:	623b      	str	r3, [r7, #32]
          break;
 800232a:	e01f      	b.n	800236c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	330c      	adds	r3, #12
 8002332:	623b      	str	r3, [r7, #32]
          break;
 8002334:	e01a      	b.n	800236c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800233e:	2304      	movs	r3, #4
 8002340:	623b      	str	r3, [r7, #32]
          break;
 8002342:	e013      	b.n	800236c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d105      	bne.n	8002358 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800234c:	2308      	movs	r3, #8
 800234e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	611a      	str	r2, [r3, #16]
          break;
 8002356:	e009      	b.n	800236c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002358:	2308      	movs	r3, #8
 800235a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	615a      	str	r2, [r3, #20]
          break;
 8002362:	e003      	b.n	800236c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002364:	2300      	movs	r3, #0
 8002366:	623b      	str	r3, [r7, #32]
          break;
 8002368:	e000      	b.n	800236c <HAL_GPIO_Init+0x130>
          break;
 800236a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2bff      	cmp	r3, #255	; 0xff
 8002370:	d801      	bhi.n	8002376 <HAL_GPIO_Init+0x13a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	e001      	b.n	800237a <HAL_GPIO_Init+0x13e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3304      	adds	r3, #4
 800237a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2bff      	cmp	r3, #255	; 0xff
 8002380:	d802      	bhi.n	8002388 <HAL_GPIO_Init+0x14c>
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	e002      	b.n	800238e <HAL_GPIO_Init+0x152>
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	3b08      	subs	r3, #8
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	210f      	movs	r1, #15
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	fa01 f303 	lsl.w	r3, r1, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	401a      	ands	r2, r3
 80023a0:	6a39      	ldr	r1, [r7, #32]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	431a      	orrs	r2, r3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 80b1 	beq.w	800251e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023bc:	4b4d      	ldr	r3, [pc, #308]	; (80024f4 <HAL_GPIO_Init+0x2b8>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	4a4c      	ldr	r2, [pc, #304]	; (80024f4 <HAL_GPIO_Init+0x2b8>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6193      	str	r3, [r2, #24]
 80023c8:	4b4a      	ldr	r3, [pc, #296]	; (80024f4 <HAL_GPIO_Init+0x2b8>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023d4:	4a48      	ldr	r2, [pc, #288]	; (80024f8 <HAL_GPIO_Init+0x2bc>)
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	220f      	movs	r2, #15
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a40      	ldr	r2, [pc, #256]	; (80024fc <HAL_GPIO_Init+0x2c0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d013      	beq.n	8002428 <HAL_GPIO_Init+0x1ec>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a3f      	ldr	r2, [pc, #252]	; (8002500 <HAL_GPIO_Init+0x2c4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00d      	beq.n	8002424 <HAL_GPIO_Init+0x1e8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a3e      	ldr	r2, [pc, #248]	; (8002504 <HAL_GPIO_Init+0x2c8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d007      	beq.n	8002420 <HAL_GPIO_Init+0x1e4>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a3d      	ldr	r2, [pc, #244]	; (8002508 <HAL_GPIO_Init+0x2cc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d101      	bne.n	800241c <HAL_GPIO_Init+0x1e0>
 8002418:	2303      	movs	r3, #3
 800241a:	e006      	b.n	800242a <HAL_GPIO_Init+0x1ee>
 800241c:	2304      	movs	r3, #4
 800241e:	e004      	b.n	800242a <HAL_GPIO_Init+0x1ee>
 8002420:	2302      	movs	r3, #2
 8002422:	e002      	b.n	800242a <HAL_GPIO_Init+0x1ee>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_GPIO_Init+0x1ee>
 8002428:	2300      	movs	r3, #0
 800242a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242c:	f002 0203 	and.w	r2, r2, #3
 8002430:	0092      	lsls	r2, r2, #2
 8002432:	4093      	lsls	r3, r2
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800243a:	492f      	ldr	r1, [pc, #188]	; (80024f8 <HAL_GPIO_Init+0x2bc>)
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3302      	adds	r3, #2
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d006      	beq.n	8002462 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002454:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_GPIO_Init+0x2d0>)
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	492c      	ldr	r1, [pc, #176]	; (800250c <HAL_GPIO_Init+0x2d0>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002462:	4b2a      	ldr	r3, [pc, #168]	; (800250c <HAL_GPIO_Init+0x2d0>)
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	43db      	mvns	r3, r3
 800246a:	4928      	ldr	r1, [pc, #160]	; (800250c <HAL_GPIO_Init+0x2d0>)
 800246c:	4013      	ands	r3, r2
 800246e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_GPIO_Init+0x2d0>)
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	4922      	ldr	r1, [pc, #136]	; (800250c <HAL_GPIO_Init+0x2d0>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	60cb      	str	r3, [r1, #12]
 8002488:	e006      	b.n	8002498 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_GPIO_Init+0x2d0>)
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	43db      	mvns	r3, r3
 8002492:	491e      	ldr	r1, [pc, #120]	; (800250c <HAL_GPIO_Init+0x2d0>)
 8002494:	4013      	ands	r3, r2
 8002496:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d006      	beq.n	80024b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	4918      	ldr	r1, [pc, #96]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
 80024b0:	e006      	b.n	80024c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	4914      	ldr	r1, [pc, #80]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024bc:	4013      	ands	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d021      	beq.n	8002510 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	490e      	ldr	r1, [pc, #56]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
 80024d8:	e021      	b.n	800251e <HAL_GPIO_Init+0x2e2>
 80024da:	bf00      	nop
 80024dc:	10320000 	.word	0x10320000
 80024e0:	10310000 	.word	0x10310000
 80024e4:	10220000 	.word	0x10220000
 80024e8:	10210000 	.word	0x10210000
 80024ec:	10120000 	.word	0x10120000
 80024f0:	10110000 	.word	0x10110000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010000 	.word	0x40010000
 80024fc:	40010800 	.word	0x40010800
 8002500:	40010c00 	.word	0x40010c00
 8002504:	40011000 	.word	0x40011000
 8002508:	40011400 	.word	0x40011400
 800250c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_GPIO_Init+0x304>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	43db      	mvns	r3, r3
 8002518:	4909      	ldr	r1, [pc, #36]	; (8002540 <HAL_GPIO_Init+0x304>)
 800251a:	4013      	ands	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	3301      	adds	r3, #1
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	f47f ae8e 	bne.w	8002250 <HAL_GPIO_Init+0x14>
  }
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	372c      	adds	r7, #44	; 0x2c
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	40010400 	.word	0x40010400

08002544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
 8002550:	4613      	mov	r3, r2
 8002552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002554:	787b      	ldrb	r3, [r7, #1]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255a:	887a      	ldrh	r2, [r7, #2]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002560:	e003      	b.n	800256a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	041a      	lsls	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	611a      	str	r2, [r3, #16]
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4013      	ands	r3, r2
 800258c:	041a      	lsls	r2, r3, #16
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	43d9      	mvns	r1, r3
 8002592:	887b      	ldrh	r3, [r7, #2]
 8002594:	400b      	ands	r3, r1
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	611a      	str	r2, [r3, #16]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e12b      	b.n	8002812 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe fa52 	bl	8000a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2224      	movs	r2, #36	; 0x24
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800260a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800260c:	f000 fcda 	bl	8002fc4 <HAL_RCC_GetPCLK1Freq>
 8002610:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4a81      	ldr	r2, [pc, #516]	; (800281c <HAL_I2C_Init+0x274>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d807      	bhi.n	800262c <HAL_I2C_Init+0x84>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4a80      	ldr	r2, [pc, #512]	; (8002820 <HAL_I2C_Init+0x278>)
 8002620:	4293      	cmp	r3, r2
 8002622:	bf94      	ite	ls
 8002624:	2301      	movls	r3, #1
 8002626:	2300      	movhi	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	e006      	b.n	800263a <HAL_I2C_Init+0x92>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4a7d      	ldr	r2, [pc, #500]	; (8002824 <HAL_I2C_Init+0x27c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	bf94      	ite	ls
 8002634:	2301      	movls	r3, #1
 8002636:	2300      	movhi	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e0e7      	b.n	8002812 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4a78      	ldr	r2, [pc, #480]	; (8002828 <HAL_I2C_Init+0x280>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	0c9b      	lsrs	r3, r3, #18
 800264c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	430a      	orrs	r2, r1
 8002660:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a6a      	ldr	r2, [pc, #424]	; (800281c <HAL_I2C_Init+0x274>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d802      	bhi.n	800267c <HAL_I2C_Init+0xd4>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3301      	adds	r3, #1
 800267a:	e009      	b.n	8002690 <HAL_I2C_Init+0xe8>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	4a69      	ldr	r2, [pc, #420]	; (800282c <HAL_I2C_Init+0x284>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	3301      	adds	r3, #1
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	430b      	orrs	r3, r1
 8002696:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	495c      	ldr	r1, [pc, #368]	; (800281c <HAL_I2C_Init+0x274>)
 80026ac:	428b      	cmp	r3, r1
 80026ae:	d819      	bhi.n	80026e4 <HAL_I2C_Init+0x13c>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1e59      	subs	r1, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80026be:	1c59      	adds	r1, r3, #1
 80026c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026c4:	400b      	ands	r3, r1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_I2C_Init+0x138>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1e59      	subs	r1, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026de:	e051      	b.n	8002784 <HAL_I2C_Init+0x1dc>
 80026e0:	2304      	movs	r3, #4
 80026e2:	e04f      	b.n	8002784 <HAL_I2C_Init+0x1dc>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d111      	bne.n	8002710 <HAL_I2C_Init+0x168>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1e58      	subs	r0, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	440b      	add	r3, r1
 80026fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fe:	3301      	adds	r3, #1
 8002700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	e012      	b.n	8002736 <HAL_I2C_Init+0x18e>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1e58      	subs	r0, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	0099      	lsls	r1, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	fbb0 f3f3 	udiv	r3, r0, r3
 8002726:	3301      	adds	r3, #1
 8002728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf0c      	ite	eq
 8002730:	2301      	moveq	r3, #1
 8002732:	2300      	movne	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Init+0x196>
 800273a:	2301      	movs	r3, #1
 800273c:	e022      	b.n	8002784 <HAL_I2C_Init+0x1dc>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10e      	bne.n	8002764 <HAL_I2C_Init+0x1bc>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1e58      	subs	r0, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	440b      	add	r3, r1
 8002754:	fbb0 f3f3 	udiv	r3, r0, r3
 8002758:	3301      	adds	r3, #1
 800275a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002762:	e00f      	b.n	8002784 <HAL_I2C_Init+0x1dc>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1e58      	subs	r0, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	0099      	lsls	r1, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	fbb0 f3f3 	udiv	r3, r0, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	6809      	ldr	r1, [r1, #0]
 8002788:	4313      	orrs	r3, r2
 800278a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6911      	ldr	r1, [r2, #16]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68d2      	ldr	r2, [r2, #12]
 80027be:	4311      	orrs	r1, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	000186a0 	.word	0x000186a0
 8002820:	001e847f 	.word	0x001e847f
 8002824:	003d08ff 	.word	0x003d08ff
 8002828:	431bde83 	.word	0x431bde83
 800282c:	10624dd3 	.word	0x10624dd3

08002830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e272      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8087 	beq.w	800295e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002850:	4b92      	ldr	r3, [pc, #584]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	2b04      	cmp	r3, #4
 800285a:	d00c      	beq.n	8002876 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800285c:	4b8f      	ldr	r3, [pc, #572]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d112      	bne.n	800288e <HAL_RCC_OscConfig+0x5e>
 8002868:	4b8c      	ldr	r3, [pc, #560]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002874:	d10b      	bne.n	800288e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002876:	4b89      	ldr	r3, [pc, #548]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d06c      	beq.n	800295c <HAL_RCC_OscConfig+0x12c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d168      	bne.n	800295c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e24c      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002896:	d106      	bne.n	80028a6 <HAL_RCC_OscConfig+0x76>
 8002898:	4b80      	ldr	r3, [pc, #512]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a7f      	ldr	r2, [pc, #508]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 800289e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	e02e      	b.n	8002904 <HAL_RCC_OscConfig+0xd4>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x98>
 80028ae:	4b7b      	ldr	r3, [pc, #492]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a7a      	ldr	r2, [pc, #488]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4b78      	ldr	r3, [pc, #480]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a77      	ldr	r2, [pc, #476]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e01d      	b.n	8002904 <HAL_RCC_OscConfig+0xd4>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0xbc>
 80028d2:	4b72      	ldr	r3, [pc, #456]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a71      	ldr	r2, [pc, #452]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	4b6f      	ldr	r3, [pc, #444]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a6e      	ldr	r2, [pc, #440]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e00b      	b.n	8002904 <HAL_RCC_OscConfig+0xd4>
 80028ec:	4b6b      	ldr	r3, [pc, #428]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a6a      	ldr	r2, [pc, #424]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	4b68      	ldr	r3, [pc, #416]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a67      	ldr	r2, [pc, #412]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80028fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002902:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d013      	beq.n	8002934 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe fb2c 	bl	8000f68 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002914:	f7fe fb28 	bl	8000f68 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e200      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	4b5d      	ldr	r3, [pc, #372]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0xe4>
 8002932:	e014      	b.n	800295e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7fe fb18 	bl	8000f68 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800293c:	f7fe fb14 	bl	8000f68 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e1ec      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x10c>
 800295a:	e000      	b.n	800295e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d063      	beq.n	8002a32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800296a:	4b4c      	ldr	r3, [pc, #304]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002976:	4b49      	ldr	r3, [pc, #292]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b08      	cmp	r3, #8
 8002980:	d11c      	bne.n	80029bc <HAL_RCC_OscConfig+0x18c>
 8002982:	4b46      	ldr	r3, [pc, #280]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d116      	bne.n	80029bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	4b43      	ldr	r3, [pc, #268]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <HAL_RCC_OscConfig+0x176>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e1c0      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a6:	4b3d      	ldr	r3, [pc, #244]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4939      	ldr	r1, [pc, #228]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	e03a      	b.n	8002a32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d020      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c4:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <HAL_RCC_OscConfig+0x270>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7fe facd 	bl	8000f68 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d2:	f7fe fac9 	bl	8000f68 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e1a1      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f0:	4b2a      	ldr	r3, [pc, #168]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4927      	ldr	r1, [pc, #156]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]
 8002a04:	e015      	b.n	8002a32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a06:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <HAL_RCC_OscConfig+0x270>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7fe faac 	bl	8000f68 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a14:	f7fe faa8 	bl	8000f68 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e180      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d03a      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d019      	beq.n	8002a7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fa8c 	bl	8000f68 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a54:	f7fe fa88 	bl	8000f68 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e160      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <HAL_RCC_OscConfig+0x26c>)
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a72:	2001      	movs	r0, #1
 8002a74:	f000 face 	bl	8003014 <RCC_Delay>
 8002a78:	e01c      	b.n	8002ab4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a80:	f7fe fa72 	bl	8000f68 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a86:	e00f      	b.n	8002aa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a88:	f7fe fa6e 	bl	8000f68 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d908      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e146      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	42420000 	.word	0x42420000
 8002aa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa8:	4b92      	ldr	r3, [pc, #584]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1e9      	bne.n	8002a88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80a6 	beq.w	8002c0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac6:	4b8b      	ldr	r3, [pc, #556]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10d      	bne.n	8002aee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	4b88      	ldr	r3, [pc, #544]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	4a87      	ldr	r2, [pc, #540]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002adc:	61d3      	str	r3, [r2, #28]
 8002ade:	4b85      	ldr	r3, [pc, #532]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aea:	2301      	movs	r3, #1
 8002aec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aee:	4b82      	ldr	r3, [pc, #520]	; (8002cf8 <HAL_RCC_OscConfig+0x4c8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d118      	bne.n	8002b2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afa:	4b7f      	ldr	r3, [pc, #508]	; (8002cf8 <HAL_RCC_OscConfig+0x4c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a7e      	ldr	r2, [pc, #504]	; (8002cf8 <HAL_RCC_OscConfig+0x4c8>)
 8002b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b06:	f7fe fa2f 	bl	8000f68 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0e:	f7fe fa2b 	bl	8000f68 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b64      	cmp	r3, #100	; 0x64
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e103      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b20:	4b75      	ldr	r3, [pc, #468]	; (8002cf8 <HAL_RCC_OscConfig+0x4c8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_OscConfig+0x312>
 8002b34:	4b6f      	ldr	r3, [pc, #444]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4a6e      	ldr	r2, [pc, #440]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	6213      	str	r3, [r2, #32]
 8002b40:	e02d      	b.n	8002b9e <HAL_RCC_OscConfig+0x36e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x334>
 8002b4a:	4b6a      	ldr	r3, [pc, #424]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	4a69      	ldr	r2, [pc, #420]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	6213      	str	r3, [r2, #32]
 8002b56:	4b67      	ldr	r3, [pc, #412]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4a66      	ldr	r2, [pc, #408]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	f023 0304 	bic.w	r3, r3, #4
 8002b60:	6213      	str	r3, [r2, #32]
 8002b62:	e01c      	b.n	8002b9e <HAL_RCC_OscConfig+0x36e>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	2b05      	cmp	r3, #5
 8002b6a:	d10c      	bne.n	8002b86 <HAL_RCC_OscConfig+0x356>
 8002b6c:	4b61      	ldr	r3, [pc, #388]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4a60      	ldr	r2, [pc, #384]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b72:	f043 0304 	orr.w	r3, r3, #4
 8002b76:	6213      	str	r3, [r2, #32]
 8002b78:	4b5e      	ldr	r3, [pc, #376]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	4a5d      	ldr	r2, [pc, #372]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	6213      	str	r3, [r2, #32]
 8002b84:	e00b      	b.n	8002b9e <HAL_RCC_OscConfig+0x36e>
 8002b86:	4b5b      	ldr	r3, [pc, #364]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	4a5a      	ldr	r2, [pc, #360]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	6213      	str	r3, [r2, #32]
 8002b92:	4b58      	ldr	r3, [pc, #352]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	4a57      	ldr	r2, [pc, #348]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	f023 0304 	bic.w	r3, r3, #4
 8002b9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d015      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba6:	f7fe f9df 	bl	8000f68 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f7fe f9db 	bl	8000f68 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e0b1      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc4:	4b4b      	ldr	r3, [pc, #300]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0ee      	beq.n	8002bae <HAL_RCC_OscConfig+0x37e>
 8002bd0:	e014      	b.n	8002bfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd2:	f7fe f9c9 	bl	8000f68 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7fe f9c5 	bl	8000f68 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e09b      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf0:	4b40      	ldr	r3, [pc, #256]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ee      	bne.n	8002bda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bfc:	7dfb      	ldrb	r3, [r7, #23]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d105      	bne.n	8002c0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c02:	4b3c      	ldr	r3, [pc, #240]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	4a3b      	ldr	r2, [pc, #236]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8087 	beq.w	8002d26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c18:	4b36      	ldr	r3, [pc, #216]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d061      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d146      	bne.n	8002cba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2c:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7fe f999 	bl	8000f68 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7fe f995 	bl	8000f68 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e06d      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c4c:	4b29      	ldr	r3, [pc, #164]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f0      	bne.n	8002c3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c60:	d108      	bne.n	8002c74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c62:	4b24      	ldr	r3, [pc, #144]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	4921      	ldr	r1, [pc, #132]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c74:	4b1f      	ldr	r3, [pc, #124]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a19      	ldr	r1, [r3, #32]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	430b      	orrs	r3, r1
 8002c86:	491b      	ldr	r1, [pc, #108]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c92:	f7fe f969 	bl	8000f68 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9a:	f7fe f965 	bl	8000f68 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e03d      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cac:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f0      	beq.n	8002c9a <HAL_RCC_OscConfig+0x46a>
 8002cb8:	e035      	b.n	8002d26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe f952 	bl	8000f68 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe f94e 	bl	8000f68 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e026      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x498>
 8002ce6:	e01e      	b.n	8002d26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d107      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e019      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_OscConfig+0x500>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d106      	bne.n	8002d22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d001      	beq.n	8002d26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000

08002d34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0d0      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d48:	4b6a      	ldr	r3, [pc, #424]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d910      	bls.n	8002d78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b67      	ldr	r3, [pc, #412]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 0207 	bic.w	r2, r3, #7
 8002d5e:	4965      	ldr	r1, [pc, #404]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b63      	ldr	r3, [pc, #396]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0b8      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d020      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d90:	4b59      	ldr	r3, [pc, #356]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a58      	ldr	r2, [pc, #352]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da8:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	4a52      	ldr	r2, [pc, #328]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002db2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db4:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	494d      	ldr	r1, [pc, #308]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d040      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d115      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e07f      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e073      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e02:	4b3d      	ldr	r3, [pc, #244]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e06b      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e12:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f023 0203 	bic.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4936      	ldr	r1, [pc, #216]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e24:	f7fe f8a0 	bl	8000f68 <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7fe f89c 	bl	8000f68 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e053      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 020c 	and.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1eb      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d210      	bcs.n	8002e84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 0207 	bic.w	r2, r3, #7
 8002e6a:	4922      	ldr	r1, [pc, #136]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e032      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4916      	ldr	r1, [pc, #88]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eae:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	490e      	ldr	r1, [pc, #56]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ec2:	f000 f821 	bl	8002f08 <HAL_RCC_GetSysClockFreq>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	490a      	ldr	r1, [pc, #40]	; (8002efc <HAL_RCC_ClockConfig+0x1c8>)
 8002ed4:	5ccb      	ldrb	r3, [r1, r3]
 8002ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eda:	4a09      	ldr	r2, [pc, #36]	; (8002f00 <HAL_RCC_ClockConfig+0x1cc>)
 8002edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <HAL_RCC_ClockConfig+0x1d0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd fffe 	bl	8000ee4 <HAL_InitTick>

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40022000 	.word	0x40022000
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	08004e08 	.word	0x08004e08
 8002f00:	2000000c 	.word	0x2000000c
 8002f04:	20000010 	.word	0x20000010

08002f08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f22:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x94>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d002      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x30>
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d003      	beq.n	8002f3e <HAL_RCC_GetSysClockFreq+0x36>
 8002f36:	e027      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f38:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f3a:	613b      	str	r3, [r7, #16]
      break;
 8002f3c:	e027      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	0c9b      	lsrs	r3, r3, #18
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f48:	5cd3      	ldrb	r3, [r2, r3]
 8002f4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d010      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f56:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x94>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	0c5b      	lsrs	r3, r3, #17
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	4a11      	ldr	r2, [pc, #68]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f62:	5cd3      	ldrb	r3, [r2, r3]
 8002f64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a0d      	ldr	r2, [pc, #52]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f6a:	fb03 f202 	mul.w	r2, r3, r2
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e004      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a0c      	ldr	r2, [pc, #48]	; (8002fac <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f7c:	fb02 f303 	mul.w	r3, r2, r3
 8002f80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	613b      	str	r3, [r7, #16]
      break;
 8002f86:	e002      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f8a:	613b      	str	r3, [r7, #16]
      break;
 8002f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f8e:	693b      	ldr	r3, [r7, #16]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	007a1200 	.word	0x007a1200
 8002fa4:	08004e20 	.word	0x08004e20
 8002fa8:	08004e30 	.word	0x08004e30
 8002fac:	003d0900 	.word	0x003d0900

08002fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb4:	4b02      	ldr	r3, [pc, #8]	; (8002fc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr
 8002fc0:	2000000c 	.word	0x2000000c

08002fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fc8:	f7ff fff2 	bl	8002fb0 <HAL_RCC_GetHCLKFreq>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	0a1b      	lsrs	r3, r3, #8
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	4903      	ldr	r1, [pc, #12]	; (8002fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fda:	5ccb      	ldrb	r3, [r1, r3]
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	08004e18 	.word	0x08004e18

08002fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ff0:	f7ff ffde 	bl	8002fb0 <HAL_RCC_GetHCLKFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	0adb      	lsrs	r3, r3, #11
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	4903      	ldr	r1, [pc, #12]	; (8003010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	08004e18 	.word	0x08004e18

08003014 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800301c:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <RCC_Delay+0x34>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <RCC_Delay+0x38>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	0a5b      	lsrs	r3, r3, #9
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003030:	bf00      	nop
  }
  while (Delay --);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1e5a      	subs	r2, r3, #1
 8003036:	60fa      	str	r2, [r7, #12]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f9      	bne.n	8003030 <RCC_Delay+0x1c>
}
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr
 8003048:	2000000c 	.word	0x2000000c
 800304c:	10624dd3 	.word	0x10624dd3

08003050 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d07d      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800306c:	2300      	movs	r3, #0
 800306e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003070:	4b4f      	ldr	r3, [pc, #316]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10d      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307c:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	4a4b      	ldr	r2, [pc, #300]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003086:	61d3      	str	r3, [r2, #28]
 8003088:	4b49      	ldr	r3, [pc, #292]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003094:	2301      	movs	r3, #1
 8003096:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	4b46      	ldr	r3, [pc, #280]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d118      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030a4:	4b43      	ldr	r3, [pc, #268]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a42      	ldr	r2, [pc, #264]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b0:	f7fd ff5a 	bl	8000f68 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	e008      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b8:	f7fd ff56 	bl	8000f68 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	; 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e06d      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	4b3a      	ldr	r3, [pc, #232]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030d6:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d02e      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d027      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030f4:	4b2e      	ldr	r3, [pc, #184]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030fe:	4b2e      	ldr	r3, [pc, #184]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003104:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800310a:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d014      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311a:	f7fd ff25 	bl	8000f68 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003120:	e00a      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003122:	f7fd ff21 	bl	8000f68 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003130:	4293      	cmp	r3, r2
 8003132:	d901      	bls.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e036      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0ee      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003144:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4917      	ldr	r1, [pc, #92]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003152:	4313      	orrs	r3, r2
 8003154:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003156:	7dfb      	ldrb	r3, [r7, #23]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d105      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315c:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003166:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003174:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	490b      	ldr	r1, [pc, #44]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003182:	4313      	orrs	r3, r2
 8003184:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	d008      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003192:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	4904      	ldr	r1, [pc, #16]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40007000 	.word	0x40007000
 80031b8:	42420440 	.word	0x42420440

080031bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e041      	b.n	8003252 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fd fc86 	bl	8000af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3304      	adds	r3, #4
 80031f8:	4619      	mov	r1, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f000 fa74 	bl	80036e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d001      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e03a      	b.n	80032ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <HAL_TIM_Base_Start_IT+0x98>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00e      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x58>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329e:	d009      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x58>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d004      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x58>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a13      	ldr	r2, [pc, #76]	; (80032fc <HAL_TIM_Base_Start_IT+0xa0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d111      	bne.n	80032d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2b06      	cmp	r3, #6
 80032c4:	d010      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0201 	orr.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d6:	e007      	b.n	80032e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr
 80032f4:	40012c00 	.word	0x40012c00
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40000800 	.word	0x40000800

08003300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b02      	cmp	r3, #2
 8003314:	d122      	bne.n	800335c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b02      	cmp	r3, #2
 8003322:	d11b      	bne.n	800335c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0202 	mvn.w	r2, #2
 800332c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f9b4 	bl	80036b0 <HAL_TIM_IC_CaptureCallback>
 8003348:	e005      	b.n	8003356 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f9a7 	bl	800369e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f9b6 	bl	80036c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b04      	cmp	r3, #4
 8003368:	d122      	bne.n	80033b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b04      	cmp	r3, #4
 8003376:	d11b      	bne.n	80033b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0204 	mvn.w	r2, #4
 8003380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f98a 	bl	80036b0 <HAL_TIM_IC_CaptureCallback>
 800339c:	e005      	b.n	80033aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f97d 	bl	800369e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f98c 	bl	80036c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d122      	bne.n	8003404 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d11b      	bne.n	8003404 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0208 	mvn.w	r2, #8
 80033d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2204      	movs	r2, #4
 80033da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f960 	bl	80036b0 <HAL_TIM_IC_CaptureCallback>
 80033f0:	e005      	b.n	80033fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f953 	bl	800369e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f962 	bl	80036c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b10      	cmp	r3, #16
 8003410:	d122      	bne.n	8003458 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b10      	cmp	r3, #16
 800341e:	d11b      	bne.n	8003458 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0210 	mvn.w	r2, #16
 8003428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2208      	movs	r2, #8
 800342e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f936 	bl	80036b0 <HAL_TIM_IC_CaptureCallback>
 8003444:	e005      	b.n	8003452 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f929 	bl	800369e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f938 	bl	80036c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b01      	cmp	r3, #1
 8003464:	d10e      	bne.n	8003484 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d107      	bne.n	8003484 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0201 	mvn.w	r2, #1
 800347c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fc ff30 	bl	80002e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348e:	2b80      	cmp	r3, #128	; 0x80
 8003490:	d10e      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349c:	2b80      	cmp	r3, #128	; 0x80
 800349e:	d107      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fa7b 	bl	80039a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d10e      	bne.n	80034dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c8:	2b40      	cmp	r3, #64	; 0x40
 80034ca:	d107      	bne.n	80034dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f8fc 	bl	80036d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d10e      	bne.n	8003508 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0320 	and.w	r3, r3, #32
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d107      	bne.n	8003508 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0220 	mvn.w	r2, #32
 8003500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fa46 	bl	8003994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_TIM_ConfigClockSource+0x1c>
 8003528:	2302      	movs	r3, #2
 800352a:	e0b4      	b.n	8003696 <HAL_TIM_ConfigClockSource+0x186>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800354a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003564:	d03e      	beq.n	80035e4 <HAL_TIM_ConfigClockSource+0xd4>
 8003566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356a:	f200 8087 	bhi.w	800367c <HAL_TIM_ConfigClockSource+0x16c>
 800356e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003572:	f000 8086 	beq.w	8003682 <HAL_TIM_ConfigClockSource+0x172>
 8003576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357a:	d87f      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x16c>
 800357c:	2b70      	cmp	r3, #112	; 0x70
 800357e:	d01a      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0xa6>
 8003580:	2b70      	cmp	r3, #112	; 0x70
 8003582:	d87b      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b60      	cmp	r3, #96	; 0x60
 8003586:	d050      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x11a>
 8003588:	2b60      	cmp	r3, #96	; 0x60
 800358a:	d877      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b50      	cmp	r3, #80	; 0x50
 800358e:	d03c      	beq.n	800360a <HAL_TIM_ConfigClockSource+0xfa>
 8003590:	2b50      	cmp	r3, #80	; 0x50
 8003592:	d873      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b40      	cmp	r3, #64	; 0x40
 8003596:	d058      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x13a>
 8003598:	2b40      	cmp	r3, #64	; 0x40
 800359a:	d86f      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b30      	cmp	r3, #48	; 0x30
 800359e:	d064      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x15a>
 80035a0:	2b30      	cmp	r3, #48	; 0x30
 80035a2:	d86b      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d060      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x15a>
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d867      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d05c      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x15a>
 80035b0:	2b10      	cmp	r3, #16
 80035b2:	d05a      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x15a>
 80035b4:	e062      	b.n	800367c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035c6:	f000 f968 	bl	800389a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	609a      	str	r2, [r3, #8]
      break;
 80035e2:	e04f      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035f4:	f000 f951 	bl	800389a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003606:	609a      	str	r2, [r3, #8]
      break;
 8003608:	e03c      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003616:	461a      	mov	r2, r3
 8003618:	f000 f8c8 	bl	80037ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2150      	movs	r1, #80	; 0x50
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f91f 	bl	8003866 <TIM_ITRx_SetConfig>
      break;
 8003628:	e02c      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003636:	461a      	mov	r2, r3
 8003638:	f000 f8e6 	bl	8003808 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2160      	movs	r1, #96	; 0x60
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f90f 	bl	8003866 <TIM_ITRx_SetConfig>
      break;
 8003648:	e01c      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003656:	461a      	mov	r2, r3
 8003658:	f000 f8a8 	bl	80037ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2140      	movs	r1, #64	; 0x40
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f8ff 	bl	8003866 <TIM_ITRx_SetConfig>
      break;
 8003668:	e00c      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4619      	mov	r1, r3
 8003674:	4610      	mov	r0, r2
 8003676:	f000 f8f6 	bl	8003866 <TIM_ITRx_SetConfig>
      break;
 800367a:	e003      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
      break;
 8003680:	e000      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003694:	7bfb      	ldrb	r3, [r7, #15]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr

080036c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
	...

080036e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a29      	ldr	r2, [pc, #164]	; (80037a0 <TIM_Base_SetConfig+0xb8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00b      	beq.n	8003718 <TIM_Base_SetConfig+0x30>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003706:	d007      	beq.n	8003718 <TIM_Base_SetConfig+0x30>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a26      	ldr	r2, [pc, #152]	; (80037a4 <TIM_Base_SetConfig+0xbc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d003      	beq.n	8003718 <TIM_Base_SetConfig+0x30>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a25      	ldr	r2, [pc, #148]	; (80037a8 <TIM_Base_SetConfig+0xc0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d108      	bne.n	800372a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <TIM_Base_SetConfig+0xb8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00b      	beq.n	800374a <TIM_Base_SetConfig+0x62>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003738:	d007      	beq.n	800374a <TIM_Base_SetConfig+0x62>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <TIM_Base_SetConfig+0xbc>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d003      	beq.n	800374a <TIM_Base_SetConfig+0x62>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <TIM_Base_SetConfig+0xc0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d108      	bne.n	800375c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a07      	ldr	r2, [pc, #28]	; (80037a0 <TIM_Base_SetConfig+0xb8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d103      	bne.n	8003790 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	615a      	str	r2, [r3, #20]
}
 8003796:	bf00      	nop
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40000800 	.word	0x40000800

080037ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	f023 0201 	bic.w	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f023 030a 	bic.w	r3, r3, #10
 80037e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	621a      	str	r2, [r3, #32]
}
 80037fe:	bf00      	nop
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr

08003808 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f023 0210 	bic.w	r2, r3, #16
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	031b      	lsls	r3, r3, #12
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003844:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4313      	orrs	r3, r2
 800384e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	621a      	str	r2, [r3, #32]
}
 800385c:	bf00      	nop
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr

08003866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003866:	b480      	push	{r7}
 8003868:	b085      	sub	sp, #20
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	f043 0307 	orr.w	r3, r3, #7
 8003888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	609a      	str	r2, [r3, #8]
}
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800389a:	b480      	push	{r7}
 800389c:	b087      	sub	sp, #28
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	021a      	lsls	r2, r3, #8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	431a      	orrs	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	609a      	str	r2, [r3, #8]
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e046      	b.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a16      	ldr	r2, [pc, #88]	; (8003988 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00e      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393c:	d009      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a12      	ldr	r2, [pc, #72]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d004      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a10      	ldr	r2, [pc, #64]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d10c      	bne.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	4313      	orrs	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	40012c00 	.word	0x40012c00
 800398c:	40000400 	.word	0x40000400
 8003990:	40000800 	.word	0x40000800

08003994 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e042      	b.n	8003a50 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd f8ac 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2224      	movs	r2, #36	; 0x24
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f91d 	bl	8003c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d16d      	bne.n	8003b54 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HAL_UART_Transmit+0x2c>
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e066      	b.n	8003b56 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2221      	movs	r2, #33	; 0x21
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a96:	f7fd fa67 	bl	8000f68 <HAL_GetTick>
 8003a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	88fa      	ldrh	r2, [r7, #6]
 8003aa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	88fa      	ldrh	r2, [r7, #6]
 8003aa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab0:	d108      	bne.n	8003ac4 <HAL_UART_Transmit+0x6c>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	e003      	b.n	8003acc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003acc:	e02a      	b.n	8003b24 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2180      	movs	r1, #128	; 0x80
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 f840 	bl	8003b5e <UART_WaitOnFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e036      	b.n	8003b56 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10b      	bne.n	8003b06 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	3302      	adds	r3, #2
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	e007      	b.n	8003b16 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	781a      	ldrb	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	3301      	adds	r3, #1
 8003b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1cf      	bne.n	8003ace <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2200      	movs	r2, #0
 8003b36:	2140      	movs	r1, #64	; 0x40
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f810 	bl	8003b5e <UART_WaitOnFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e006      	b.n	8003b56 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	e000      	b.n	8003b56 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
  }
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b090      	sub	sp, #64	; 0x40
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6e:	e050      	b.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b76:	d04c      	beq.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b7e:	f7fd f9f3 	bl	8000f68 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d241      	bcs.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	330c      	adds	r3, #12
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	330c      	adds	r3, #12
 8003bac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bae:	637a      	str	r2, [r7, #52]	; 0x34
 8003bb0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e5      	bne.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3314      	adds	r3, #20
 8003bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	e853 3f00 	ldrex	r3, [r3]
 8003bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3314      	adds	r3, #20
 8003be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003be2:	623a      	str	r2, [r7, #32]
 8003be4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	69f9      	ldr	r1, [r7, #28]
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1e5      	bne.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e00f      	b.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	bf0c      	ite	eq
 8003c22:	2301      	moveq	r3, #1
 8003c24:	2300      	movne	r3, #0
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d09f      	beq.n	8003b70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3740      	adds	r7, #64	; 0x40
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c76:	f023 030c 	bic.w	r3, r3, #12
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6812      	ldr	r2, [r2, #0]
 8003c7e:	68b9      	ldr	r1, [r7, #8]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a2c      	ldr	r2, [pc, #176]	; (8003d50 <UART_SetConfig+0x114>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d103      	bne.n	8003cac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ca4:	f7ff f9a2 	bl	8002fec <HAL_RCC_GetPCLK2Freq>
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	e002      	b.n	8003cb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cac:	f7ff f98a 	bl	8002fc4 <HAL_RCC_GetPCLK1Freq>
 8003cb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	009a      	lsls	r2, r3, #2
 8003cbc:	441a      	add	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	4a22      	ldr	r2, [pc, #136]	; (8003d54 <UART_SetConfig+0x118>)
 8003cca:	fba2 2303 	umull	r2, r3, r2, r3
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	0119      	lsls	r1, r3, #4
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	009a      	lsls	r2, r3, #2
 8003cdc:	441a      	add	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <UART_SetConfig+0x118>)
 8003cea:	fba3 0302 	umull	r0, r3, r3, r2
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	2064      	movs	r0, #100	; 0x64
 8003cf2:	fb00 f303 	mul.w	r3, r0, r3
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	3332      	adds	r3, #50	; 0x32
 8003cfc:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <UART_SetConfig+0x118>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d08:	4419      	add	r1, r3
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009a      	lsls	r2, r3, #2
 8003d14:	441a      	add	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <UART_SetConfig+0x118>)
 8003d22:	fba3 0302 	umull	r0, r3, r3, r2
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2064      	movs	r0, #100	; 0x64
 8003d2a:	fb00 f303 	mul.w	r3, r0, r3
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	3332      	adds	r3, #50	; 0x32
 8003d34:	4a07      	ldr	r2, [pc, #28]	; (8003d54 <UART_SetConfig+0x118>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	f003 020f 	and.w	r2, r3, #15
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	440a      	add	r2, r1
 8003d46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40013800 	.word	0x40013800
 8003d54:	51eb851f 	.word	0x51eb851f

08003d58 <rand>:
 8003d58:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <rand+0x5c>)
 8003d5a:	b510      	push	{r4, lr}
 8003d5c:	681c      	ldr	r4, [r3, #0]
 8003d5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d60:	b9b3      	cbnz	r3, 8003d90 <rand+0x38>
 8003d62:	2018      	movs	r0, #24
 8003d64:	f000 fb0e 	bl	8004384 <malloc>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	6320      	str	r0, [r4, #48]	; 0x30
 8003d6c:	b920      	cbnz	r0, 8003d78 <rand+0x20>
 8003d6e:	2152      	movs	r1, #82	; 0x52
 8003d70:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <rand+0x60>)
 8003d72:	4812      	ldr	r0, [pc, #72]	; (8003dbc <rand+0x64>)
 8003d74:	f000 faa0 	bl	80042b8 <__assert_func>
 8003d78:	4911      	ldr	r1, [pc, #68]	; (8003dc0 <rand+0x68>)
 8003d7a:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <rand+0x6c>)
 8003d7c:	e9c0 1300 	strd	r1, r3, [r0]
 8003d80:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <rand+0x70>)
 8003d82:	2100      	movs	r1, #0
 8003d84:	6083      	str	r3, [r0, #8]
 8003d86:	230b      	movs	r3, #11
 8003d88:	8183      	strh	r3, [r0, #12]
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003d90:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003d92:	480e      	ldr	r0, [pc, #56]	; (8003dcc <rand+0x74>)
 8003d94:	690b      	ldr	r3, [r1, #16]
 8003d96:	694c      	ldr	r4, [r1, #20]
 8003d98:	4358      	muls	r0, r3
 8003d9a:	4a0d      	ldr	r2, [pc, #52]	; (8003dd0 <rand+0x78>)
 8003d9c:	fb02 0004 	mla	r0, r2, r4, r0
 8003da0:	fba3 3202 	umull	r3, r2, r3, r2
 8003da4:	3301      	adds	r3, #1
 8003da6:	eb40 0002 	adc.w	r0, r0, r2
 8003daa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003dae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003db2:	bd10      	pop	{r4, pc}
 8003db4:	20000070 	.word	0x20000070
 8003db8:	08004e32 	.word	0x08004e32
 8003dbc:	08004e49 	.word	0x08004e49
 8003dc0:	abcd330e 	.word	0xabcd330e
 8003dc4:	e66d1234 	.word	0xe66d1234
 8003dc8:	0005deec 	.word	0x0005deec
 8003dcc:	5851f42d 	.word	0x5851f42d
 8003dd0:	4c957f2d 	.word	0x4c957f2d

08003dd4 <std>:
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	b510      	push	{r4, lr}
 8003dd8:	4604      	mov	r4, r0
 8003dda:	e9c0 3300 	strd	r3, r3, [r0]
 8003dde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003de2:	6083      	str	r3, [r0, #8]
 8003de4:	8181      	strh	r1, [r0, #12]
 8003de6:	6643      	str	r3, [r0, #100]	; 0x64
 8003de8:	81c2      	strh	r2, [r0, #14]
 8003dea:	6183      	str	r3, [r0, #24]
 8003dec:	4619      	mov	r1, r3
 8003dee:	2208      	movs	r2, #8
 8003df0:	305c      	adds	r0, #92	; 0x5c
 8003df2:	f000 f9e5 	bl	80041c0 <memset>
 8003df6:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <std+0x58>)
 8003df8:	6224      	str	r4, [r4, #32]
 8003dfa:	6263      	str	r3, [r4, #36]	; 0x24
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <std+0x5c>)
 8003dfe:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e00:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <std+0x60>)
 8003e02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <std+0x64>)
 8003e06:	6323      	str	r3, [r4, #48]	; 0x30
 8003e08:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <std+0x68>)
 8003e0a:	429c      	cmp	r4, r3
 8003e0c:	d006      	beq.n	8003e1c <std+0x48>
 8003e0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003e12:	4294      	cmp	r4, r2
 8003e14:	d002      	beq.n	8003e1c <std+0x48>
 8003e16:	33d0      	adds	r3, #208	; 0xd0
 8003e18:	429c      	cmp	r4, r3
 8003e1a:	d105      	bne.n	8003e28 <std+0x54>
 8003e1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e24:	f000 ba44 	b.w	80042b0 <__retarget_lock_init_recursive>
 8003e28:	bd10      	pop	{r4, pc}
 8003e2a:	bf00      	nop
 8003e2c:	08004011 	.word	0x08004011
 8003e30:	08004033 	.word	0x08004033
 8003e34:	0800406b 	.word	0x0800406b
 8003e38:	0800408f 	.word	0x0800408f
 8003e3c:	20000260 	.word	0x20000260

08003e40 <stdio_exit_handler>:
 8003e40:	4a02      	ldr	r2, [pc, #8]	; (8003e4c <stdio_exit_handler+0xc>)
 8003e42:	4903      	ldr	r1, [pc, #12]	; (8003e50 <stdio_exit_handler+0x10>)
 8003e44:	4803      	ldr	r0, [pc, #12]	; (8003e54 <stdio_exit_handler+0x14>)
 8003e46:	f000 b869 	b.w	8003f1c <_fwalk_sglue>
 8003e4a:	bf00      	nop
 8003e4c:	20000018 	.word	0x20000018
 8003e50:	080045f1 	.word	0x080045f1
 8003e54:	20000024 	.word	0x20000024

08003e58 <cleanup_stdio>:
 8003e58:	6841      	ldr	r1, [r0, #4]
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <cleanup_stdio+0x34>)
 8003e5c:	b510      	push	{r4, lr}
 8003e5e:	4299      	cmp	r1, r3
 8003e60:	4604      	mov	r4, r0
 8003e62:	d001      	beq.n	8003e68 <cleanup_stdio+0x10>
 8003e64:	f000 fbc4 	bl	80045f0 <_fflush_r>
 8003e68:	68a1      	ldr	r1, [r4, #8]
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <cleanup_stdio+0x38>)
 8003e6c:	4299      	cmp	r1, r3
 8003e6e:	d002      	beq.n	8003e76 <cleanup_stdio+0x1e>
 8003e70:	4620      	mov	r0, r4
 8003e72:	f000 fbbd 	bl	80045f0 <_fflush_r>
 8003e76:	68e1      	ldr	r1, [r4, #12]
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <cleanup_stdio+0x3c>)
 8003e7a:	4299      	cmp	r1, r3
 8003e7c:	d004      	beq.n	8003e88 <cleanup_stdio+0x30>
 8003e7e:	4620      	mov	r0, r4
 8003e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e84:	f000 bbb4 	b.w	80045f0 <_fflush_r>
 8003e88:	bd10      	pop	{r4, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000260 	.word	0x20000260
 8003e90:	200002c8 	.word	0x200002c8
 8003e94:	20000330 	.word	0x20000330

08003e98 <global_stdio_init.part.0>:
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <global_stdio_init.part.0+0x30>)
 8003e9c:	4c0b      	ldr	r4, [pc, #44]	; (8003ecc <global_stdio_init.part.0+0x34>)
 8003e9e:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <global_stdio_init.part.0+0x38>)
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	2104      	movs	r1, #4
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f7ff ff94 	bl	8003dd4 <std>
 8003eac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	2109      	movs	r1, #9
 8003eb4:	f7ff ff8e 	bl	8003dd4 <std>
 8003eb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ec2:	2112      	movs	r1, #18
 8003ec4:	f7ff bf86 	b.w	8003dd4 <std>
 8003ec8:	20000398 	.word	0x20000398
 8003ecc:	20000260 	.word	0x20000260
 8003ed0:	08003e41 	.word	0x08003e41

08003ed4 <__sfp_lock_acquire>:
 8003ed4:	4801      	ldr	r0, [pc, #4]	; (8003edc <__sfp_lock_acquire+0x8>)
 8003ed6:	f000 b9ec 	b.w	80042b2 <__retarget_lock_acquire_recursive>
 8003eda:	bf00      	nop
 8003edc:	200003a1 	.word	0x200003a1

08003ee0 <__sfp_lock_release>:
 8003ee0:	4801      	ldr	r0, [pc, #4]	; (8003ee8 <__sfp_lock_release+0x8>)
 8003ee2:	f000 b9e7 	b.w	80042b4 <__retarget_lock_release_recursive>
 8003ee6:	bf00      	nop
 8003ee8:	200003a1 	.word	0x200003a1

08003eec <__sinit>:
 8003eec:	b510      	push	{r4, lr}
 8003eee:	4604      	mov	r4, r0
 8003ef0:	f7ff fff0 	bl	8003ed4 <__sfp_lock_acquire>
 8003ef4:	6a23      	ldr	r3, [r4, #32]
 8003ef6:	b11b      	cbz	r3, 8003f00 <__sinit+0x14>
 8003ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003efc:	f7ff bff0 	b.w	8003ee0 <__sfp_lock_release>
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <__sinit+0x28>)
 8003f02:	6223      	str	r3, [r4, #32]
 8003f04:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <__sinit+0x2c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f5      	bne.n	8003ef8 <__sinit+0xc>
 8003f0c:	f7ff ffc4 	bl	8003e98 <global_stdio_init.part.0>
 8003f10:	e7f2      	b.n	8003ef8 <__sinit+0xc>
 8003f12:	bf00      	nop
 8003f14:	08003e59 	.word	0x08003e59
 8003f18:	20000398 	.word	0x20000398

08003f1c <_fwalk_sglue>:
 8003f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f20:	4607      	mov	r7, r0
 8003f22:	4688      	mov	r8, r1
 8003f24:	4614      	mov	r4, r2
 8003f26:	2600      	movs	r6, #0
 8003f28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f2c:	f1b9 0901 	subs.w	r9, r9, #1
 8003f30:	d505      	bpl.n	8003f3e <_fwalk_sglue+0x22>
 8003f32:	6824      	ldr	r4, [r4, #0]
 8003f34:	2c00      	cmp	r4, #0
 8003f36:	d1f7      	bne.n	8003f28 <_fwalk_sglue+0xc>
 8003f38:	4630      	mov	r0, r6
 8003f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f3e:	89ab      	ldrh	r3, [r5, #12]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d907      	bls.n	8003f54 <_fwalk_sglue+0x38>
 8003f44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	d003      	beq.n	8003f54 <_fwalk_sglue+0x38>
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	4638      	mov	r0, r7
 8003f50:	47c0      	blx	r8
 8003f52:	4306      	orrs	r6, r0
 8003f54:	3568      	adds	r5, #104	; 0x68
 8003f56:	e7e9      	b.n	8003f2c <_fwalk_sglue+0x10>

08003f58 <_puts_r>:
 8003f58:	6a03      	ldr	r3, [r0, #32]
 8003f5a:	b570      	push	{r4, r5, r6, lr}
 8003f5c:	4605      	mov	r5, r0
 8003f5e:	460e      	mov	r6, r1
 8003f60:	6884      	ldr	r4, [r0, #8]
 8003f62:	b90b      	cbnz	r3, 8003f68 <_puts_r+0x10>
 8003f64:	f7ff ffc2 	bl	8003eec <__sinit>
 8003f68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f6a:	07db      	lsls	r3, r3, #31
 8003f6c:	d405      	bmi.n	8003f7a <_puts_r+0x22>
 8003f6e:	89a3      	ldrh	r3, [r4, #12]
 8003f70:	0598      	lsls	r0, r3, #22
 8003f72:	d402      	bmi.n	8003f7a <_puts_r+0x22>
 8003f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f76:	f000 f99c 	bl	80042b2 <__retarget_lock_acquire_recursive>
 8003f7a:	89a3      	ldrh	r3, [r4, #12]
 8003f7c:	0719      	lsls	r1, r3, #28
 8003f7e:	d513      	bpl.n	8003fa8 <_puts_r+0x50>
 8003f80:	6923      	ldr	r3, [r4, #16]
 8003f82:	b18b      	cbz	r3, 8003fa8 <_puts_r+0x50>
 8003f84:	3e01      	subs	r6, #1
 8003f86:	68a3      	ldr	r3, [r4, #8]
 8003f88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	60a3      	str	r3, [r4, #8]
 8003f90:	b9e9      	cbnz	r1, 8003fce <_puts_r+0x76>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	da2e      	bge.n	8003ff4 <_puts_r+0x9c>
 8003f96:	4622      	mov	r2, r4
 8003f98:	210a      	movs	r1, #10
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f000 f87b 	bl	8004096 <__swbuf_r>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d007      	beq.n	8003fb4 <_puts_r+0x5c>
 8003fa4:	250a      	movs	r5, #10
 8003fa6:	e007      	b.n	8003fb8 <_puts_r+0x60>
 8003fa8:	4621      	mov	r1, r4
 8003faa:	4628      	mov	r0, r5
 8003fac:	f000 f8b0 	bl	8004110 <__swsetup_r>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d0e7      	beq.n	8003f84 <_puts_r+0x2c>
 8003fb4:	f04f 35ff 	mov.w	r5, #4294967295
 8003fb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fba:	07da      	lsls	r2, r3, #31
 8003fbc:	d405      	bmi.n	8003fca <_puts_r+0x72>
 8003fbe:	89a3      	ldrh	r3, [r4, #12]
 8003fc0:	059b      	lsls	r3, r3, #22
 8003fc2:	d402      	bmi.n	8003fca <_puts_r+0x72>
 8003fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fc6:	f000 f975 	bl	80042b4 <__retarget_lock_release_recursive>
 8003fca:	4628      	mov	r0, r5
 8003fcc:	bd70      	pop	{r4, r5, r6, pc}
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	da04      	bge.n	8003fdc <_puts_r+0x84>
 8003fd2:	69a2      	ldr	r2, [r4, #24]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	dc06      	bgt.n	8003fe6 <_puts_r+0x8e>
 8003fd8:	290a      	cmp	r1, #10
 8003fda:	d004      	beq.n	8003fe6 <_puts_r+0x8e>
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	6022      	str	r2, [r4, #0]
 8003fe2:	7019      	strb	r1, [r3, #0]
 8003fe4:	e7cf      	b.n	8003f86 <_puts_r+0x2e>
 8003fe6:	4622      	mov	r2, r4
 8003fe8:	4628      	mov	r0, r5
 8003fea:	f000 f854 	bl	8004096 <__swbuf_r>
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d1c9      	bne.n	8003f86 <_puts_r+0x2e>
 8003ff2:	e7df      	b.n	8003fb4 <_puts_r+0x5c>
 8003ff4:	250a      	movs	r5, #10
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	6022      	str	r2, [r4, #0]
 8003ffc:	701d      	strb	r5, [r3, #0]
 8003ffe:	e7db      	b.n	8003fb8 <_puts_r+0x60>

08004000 <puts>:
 8004000:	4b02      	ldr	r3, [pc, #8]	; (800400c <puts+0xc>)
 8004002:	4601      	mov	r1, r0
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	f7ff bfa7 	b.w	8003f58 <_puts_r>
 800400a:	bf00      	nop
 800400c:	20000070 	.word	0x20000070

08004010 <__sread>:
 8004010:	b510      	push	{r4, lr}
 8004012:	460c      	mov	r4, r1
 8004014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004018:	f000 f8fc 	bl	8004214 <_read_r>
 800401c:	2800      	cmp	r0, #0
 800401e:	bfab      	itete	ge
 8004020:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004022:	89a3      	ldrhlt	r3, [r4, #12]
 8004024:	181b      	addge	r3, r3, r0
 8004026:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800402a:	bfac      	ite	ge
 800402c:	6563      	strge	r3, [r4, #84]	; 0x54
 800402e:	81a3      	strhlt	r3, [r4, #12]
 8004030:	bd10      	pop	{r4, pc}

08004032 <__swrite>:
 8004032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004036:	461f      	mov	r7, r3
 8004038:	898b      	ldrh	r3, [r1, #12]
 800403a:	4605      	mov	r5, r0
 800403c:	05db      	lsls	r3, r3, #23
 800403e:	460c      	mov	r4, r1
 8004040:	4616      	mov	r6, r2
 8004042:	d505      	bpl.n	8004050 <__swrite+0x1e>
 8004044:	2302      	movs	r3, #2
 8004046:	2200      	movs	r2, #0
 8004048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800404c:	f000 f8d0 	bl	80041f0 <_lseek_r>
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	4632      	mov	r2, r6
 8004054:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004058:	81a3      	strh	r3, [r4, #12]
 800405a:	4628      	mov	r0, r5
 800405c:	463b      	mov	r3, r7
 800405e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004066:	f000 b8e7 	b.w	8004238 <_write_r>

0800406a <__sseek>:
 800406a:	b510      	push	{r4, lr}
 800406c:	460c      	mov	r4, r1
 800406e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004072:	f000 f8bd 	bl	80041f0 <_lseek_r>
 8004076:	1c43      	adds	r3, r0, #1
 8004078:	89a3      	ldrh	r3, [r4, #12]
 800407a:	bf15      	itete	ne
 800407c:	6560      	strne	r0, [r4, #84]	; 0x54
 800407e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004086:	81a3      	strheq	r3, [r4, #12]
 8004088:	bf18      	it	ne
 800408a:	81a3      	strhne	r3, [r4, #12]
 800408c:	bd10      	pop	{r4, pc}

0800408e <__sclose>:
 800408e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004092:	f000 b89d 	b.w	80041d0 <_close_r>

08004096 <__swbuf_r>:
 8004096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004098:	460e      	mov	r6, r1
 800409a:	4614      	mov	r4, r2
 800409c:	4605      	mov	r5, r0
 800409e:	b118      	cbz	r0, 80040a8 <__swbuf_r+0x12>
 80040a0:	6a03      	ldr	r3, [r0, #32]
 80040a2:	b90b      	cbnz	r3, 80040a8 <__swbuf_r+0x12>
 80040a4:	f7ff ff22 	bl	8003eec <__sinit>
 80040a8:	69a3      	ldr	r3, [r4, #24]
 80040aa:	60a3      	str	r3, [r4, #8]
 80040ac:	89a3      	ldrh	r3, [r4, #12]
 80040ae:	071a      	lsls	r2, r3, #28
 80040b0:	d525      	bpl.n	80040fe <__swbuf_r+0x68>
 80040b2:	6923      	ldr	r3, [r4, #16]
 80040b4:	b31b      	cbz	r3, 80040fe <__swbuf_r+0x68>
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	6922      	ldr	r2, [r4, #16]
 80040ba:	b2f6      	uxtb	r6, r6
 80040bc:	1a98      	subs	r0, r3, r2
 80040be:	6963      	ldr	r3, [r4, #20]
 80040c0:	4637      	mov	r7, r6
 80040c2:	4283      	cmp	r3, r0
 80040c4:	dc04      	bgt.n	80040d0 <__swbuf_r+0x3a>
 80040c6:	4621      	mov	r1, r4
 80040c8:	4628      	mov	r0, r5
 80040ca:	f000 fa91 	bl	80045f0 <_fflush_r>
 80040ce:	b9e0      	cbnz	r0, 800410a <__swbuf_r+0x74>
 80040d0:	68a3      	ldr	r3, [r4, #8]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	60a3      	str	r3, [r4, #8]
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	6022      	str	r2, [r4, #0]
 80040dc:	701e      	strb	r6, [r3, #0]
 80040de:	6962      	ldr	r2, [r4, #20]
 80040e0:	1c43      	adds	r3, r0, #1
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d004      	beq.n	80040f0 <__swbuf_r+0x5a>
 80040e6:	89a3      	ldrh	r3, [r4, #12]
 80040e8:	07db      	lsls	r3, r3, #31
 80040ea:	d506      	bpl.n	80040fa <__swbuf_r+0x64>
 80040ec:	2e0a      	cmp	r6, #10
 80040ee:	d104      	bne.n	80040fa <__swbuf_r+0x64>
 80040f0:	4621      	mov	r1, r4
 80040f2:	4628      	mov	r0, r5
 80040f4:	f000 fa7c 	bl	80045f0 <_fflush_r>
 80040f8:	b938      	cbnz	r0, 800410a <__swbuf_r+0x74>
 80040fa:	4638      	mov	r0, r7
 80040fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040fe:	4621      	mov	r1, r4
 8004100:	4628      	mov	r0, r5
 8004102:	f000 f805 	bl	8004110 <__swsetup_r>
 8004106:	2800      	cmp	r0, #0
 8004108:	d0d5      	beq.n	80040b6 <__swbuf_r+0x20>
 800410a:	f04f 37ff 	mov.w	r7, #4294967295
 800410e:	e7f4      	b.n	80040fa <__swbuf_r+0x64>

08004110 <__swsetup_r>:
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <__swsetup_r+0xac>)
 8004114:	4605      	mov	r5, r0
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	460c      	mov	r4, r1
 800411a:	b118      	cbz	r0, 8004124 <__swsetup_r+0x14>
 800411c:	6a03      	ldr	r3, [r0, #32]
 800411e:	b90b      	cbnz	r3, 8004124 <__swsetup_r+0x14>
 8004120:	f7ff fee4 	bl	8003eec <__sinit>
 8004124:	89a3      	ldrh	r3, [r4, #12]
 8004126:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800412a:	0718      	lsls	r0, r3, #28
 800412c:	d422      	bmi.n	8004174 <__swsetup_r+0x64>
 800412e:	06d9      	lsls	r1, r3, #27
 8004130:	d407      	bmi.n	8004142 <__swsetup_r+0x32>
 8004132:	2309      	movs	r3, #9
 8004134:	602b      	str	r3, [r5, #0]
 8004136:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800413a:	f04f 30ff 	mov.w	r0, #4294967295
 800413e:	81a3      	strh	r3, [r4, #12]
 8004140:	e034      	b.n	80041ac <__swsetup_r+0x9c>
 8004142:	0758      	lsls	r0, r3, #29
 8004144:	d512      	bpl.n	800416c <__swsetup_r+0x5c>
 8004146:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004148:	b141      	cbz	r1, 800415c <__swsetup_r+0x4c>
 800414a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800414e:	4299      	cmp	r1, r3
 8004150:	d002      	beq.n	8004158 <__swsetup_r+0x48>
 8004152:	4628      	mov	r0, r5
 8004154:	f000 f8ce 	bl	80042f4 <_free_r>
 8004158:	2300      	movs	r3, #0
 800415a:	6363      	str	r3, [r4, #52]	; 0x34
 800415c:	89a3      	ldrh	r3, [r4, #12]
 800415e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004162:	81a3      	strh	r3, [r4, #12]
 8004164:	2300      	movs	r3, #0
 8004166:	6063      	str	r3, [r4, #4]
 8004168:	6923      	ldr	r3, [r4, #16]
 800416a:	6023      	str	r3, [r4, #0]
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	f043 0308 	orr.w	r3, r3, #8
 8004172:	81a3      	strh	r3, [r4, #12]
 8004174:	6923      	ldr	r3, [r4, #16]
 8004176:	b94b      	cbnz	r3, 800418c <__swsetup_r+0x7c>
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800417e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004182:	d003      	beq.n	800418c <__swsetup_r+0x7c>
 8004184:	4621      	mov	r1, r4
 8004186:	4628      	mov	r0, r5
 8004188:	f000 fa91 	bl	80046ae <__smakebuf_r>
 800418c:	89a0      	ldrh	r0, [r4, #12]
 800418e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004192:	f010 0301 	ands.w	r3, r0, #1
 8004196:	d00a      	beq.n	80041ae <__swsetup_r+0x9e>
 8004198:	2300      	movs	r3, #0
 800419a:	60a3      	str	r3, [r4, #8]
 800419c:	6963      	ldr	r3, [r4, #20]
 800419e:	425b      	negs	r3, r3
 80041a0:	61a3      	str	r3, [r4, #24]
 80041a2:	6923      	ldr	r3, [r4, #16]
 80041a4:	b943      	cbnz	r3, 80041b8 <__swsetup_r+0xa8>
 80041a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80041aa:	d1c4      	bne.n	8004136 <__swsetup_r+0x26>
 80041ac:	bd38      	pop	{r3, r4, r5, pc}
 80041ae:	0781      	lsls	r1, r0, #30
 80041b0:	bf58      	it	pl
 80041b2:	6963      	ldrpl	r3, [r4, #20]
 80041b4:	60a3      	str	r3, [r4, #8]
 80041b6:	e7f4      	b.n	80041a2 <__swsetup_r+0x92>
 80041b8:	2000      	movs	r0, #0
 80041ba:	e7f7      	b.n	80041ac <__swsetup_r+0x9c>
 80041bc:	20000070 	.word	0x20000070

080041c0 <memset>:
 80041c0:	4603      	mov	r3, r0
 80041c2:	4402      	add	r2, r0
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d100      	bne.n	80041ca <memset+0xa>
 80041c8:	4770      	bx	lr
 80041ca:	f803 1b01 	strb.w	r1, [r3], #1
 80041ce:	e7f9      	b.n	80041c4 <memset+0x4>

080041d0 <_close_r>:
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	2300      	movs	r3, #0
 80041d4:	4d05      	ldr	r5, [pc, #20]	; (80041ec <_close_r+0x1c>)
 80041d6:	4604      	mov	r4, r0
 80041d8:	4608      	mov	r0, r1
 80041da:	602b      	str	r3, [r5, #0]
 80041dc:	f7fc fdc8 	bl	8000d70 <_close>
 80041e0:	1c43      	adds	r3, r0, #1
 80041e2:	d102      	bne.n	80041ea <_close_r+0x1a>
 80041e4:	682b      	ldr	r3, [r5, #0]
 80041e6:	b103      	cbz	r3, 80041ea <_close_r+0x1a>
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	bd38      	pop	{r3, r4, r5, pc}
 80041ec:	2000039c 	.word	0x2000039c

080041f0 <_lseek_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4604      	mov	r4, r0
 80041f4:	4608      	mov	r0, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	2200      	movs	r2, #0
 80041fa:	4d05      	ldr	r5, [pc, #20]	; (8004210 <_lseek_r+0x20>)
 80041fc:	602a      	str	r2, [r5, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	f7fc fdda 	bl	8000db8 <_lseek>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d102      	bne.n	800420e <_lseek_r+0x1e>
 8004208:	682b      	ldr	r3, [r5, #0]
 800420a:	b103      	cbz	r3, 800420e <_lseek_r+0x1e>
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	2000039c 	.word	0x2000039c

08004214 <_read_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	4604      	mov	r4, r0
 8004218:	4608      	mov	r0, r1
 800421a:	4611      	mov	r1, r2
 800421c:	2200      	movs	r2, #0
 800421e:	4d05      	ldr	r5, [pc, #20]	; (8004234 <_read_r+0x20>)
 8004220:	602a      	str	r2, [r5, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	f7fc fd6b 	bl	8000cfe <_read>
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	d102      	bne.n	8004232 <_read_r+0x1e>
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	b103      	cbz	r3, 8004232 <_read_r+0x1e>
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	bd38      	pop	{r3, r4, r5, pc}
 8004234:	2000039c 	.word	0x2000039c

08004238 <_write_r>:
 8004238:	b538      	push	{r3, r4, r5, lr}
 800423a:	4604      	mov	r4, r0
 800423c:	4608      	mov	r0, r1
 800423e:	4611      	mov	r1, r2
 8004240:	2200      	movs	r2, #0
 8004242:	4d05      	ldr	r5, [pc, #20]	; (8004258 <_write_r+0x20>)
 8004244:	602a      	str	r2, [r5, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	f7fc fd76 	bl	8000d38 <_write>
 800424c:	1c43      	adds	r3, r0, #1
 800424e:	d102      	bne.n	8004256 <_write_r+0x1e>
 8004250:	682b      	ldr	r3, [r5, #0]
 8004252:	b103      	cbz	r3, 8004256 <_write_r+0x1e>
 8004254:	6023      	str	r3, [r4, #0]
 8004256:	bd38      	pop	{r3, r4, r5, pc}
 8004258:	2000039c 	.word	0x2000039c

0800425c <__errno>:
 800425c:	4b01      	ldr	r3, [pc, #4]	; (8004264 <__errno+0x8>)
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	20000070 	.word	0x20000070

08004268 <__libc_init_array>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	2600      	movs	r6, #0
 800426c:	4d0c      	ldr	r5, [pc, #48]	; (80042a0 <__libc_init_array+0x38>)
 800426e:	4c0d      	ldr	r4, [pc, #52]	; (80042a4 <__libc_init_array+0x3c>)
 8004270:	1b64      	subs	r4, r4, r5
 8004272:	10a4      	asrs	r4, r4, #2
 8004274:	42a6      	cmp	r6, r4
 8004276:	d109      	bne.n	800428c <__libc_init_array+0x24>
 8004278:	f000 fdb6 	bl	8004de8 <_init>
 800427c:	2600      	movs	r6, #0
 800427e:	4d0a      	ldr	r5, [pc, #40]	; (80042a8 <__libc_init_array+0x40>)
 8004280:	4c0a      	ldr	r4, [pc, #40]	; (80042ac <__libc_init_array+0x44>)
 8004282:	1b64      	subs	r4, r4, r5
 8004284:	10a4      	asrs	r4, r4, #2
 8004286:	42a6      	cmp	r6, r4
 8004288:	d105      	bne.n	8004296 <__libc_init_array+0x2e>
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004290:	4798      	blx	r3
 8004292:	3601      	adds	r6, #1
 8004294:	e7ee      	b.n	8004274 <__libc_init_array+0xc>
 8004296:	f855 3b04 	ldr.w	r3, [r5], #4
 800429a:	4798      	blx	r3
 800429c:	3601      	adds	r6, #1
 800429e:	e7f2      	b.n	8004286 <__libc_init_array+0x1e>
 80042a0:	08004f10 	.word	0x08004f10
 80042a4:	08004f10 	.word	0x08004f10
 80042a8:	08004f10 	.word	0x08004f10
 80042ac:	08004f14 	.word	0x08004f14

080042b0 <__retarget_lock_init_recursive>:
 80042b0:	4770      	bx	lr

080042b2 <__retarget_lock_acquire_recursive>:
 80042b2:	4770      	bx	lr

080042b4 <__retarget_lock_release_recursive>:
 80042b4:	4770      	bx	lr
	...

080042b8 <__assert_func>:
 80042b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80042ba:	4614      	mov	r4, r2
 80042bc:	461a      	mov	r2, r3
 80042be:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <__assert_func+0x2c>)
 80042c0:	4605      	mov	r5, r0
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68d8      	ldr	r0, [r3, #12]
 80042c6:	b14c      	cbz	r4, 80042dc <__assert_func+0x24>
 80042c8:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <__assert_func+0x30>)
 80042ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80042ce:	9100      	str	r1, [sp, #0]
 80042d0:	462b      	mov	r3, r5
 80042d2:	4906      	ldr	r1, [pc, #24]	; (80042ec <__assert_func+0x34>)
 80042d4:	f000 f9b4 	bl	8004640 <fiprintf>
 80042d8:	f000 fa58 	bl	800478c <abort>
 80042dc:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <__assert_func+0x38>)
 80042de:	461c      	mov	r4, r3
 80042e0:	e7f3      	b.n	80042ca <__assert_func+0x12>
 80042e2:	bf00      	nop
 80042e4:	20000070 	.word	0x20000070
 80042e8:	08004ea1 	.word	0x08004ea1
 80042ec:	08004eae 	.word	0x08004eae
 80042f0:	08004edc 	.word	0x08004edc

080042f4 <_free_r>:
 80042f4:	b538      	push	{r3, r4, r5, lr}
 80042f6:	4605      	mov	r5, r0
 80042f8:	2900      	cmp	r1, #0
 80042fa:	d040      	beq.n	800437e <_free_r+0x8a>
 80042fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004300:	1f0c      	subs	r4, r1, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	bfb8      	it	lt
 8004306:	18e4      	addlt	r4, r4, r3
 8004308:	f000 f8e4 	bl	80044d4 <__malloc_lock>
 800430c:	4a1c      	ldr	r2, [pc, #112]	; (8004380 <_free_r+0x8c>)
 800430e:	6813      	ldr	r3, [r2, #0]
 8004310:	b933      	cbnz	r3, 8004320 <_free_r+0x2c>
 8004312:	6063      	str	r3, [r4, #4]
 8004314:	6014      	str	r4, [r2, #0]
 8004316:	4628      	mov	r0, r5
 8004318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800431c:	f000 b8e0 	b.w	80044e0 <__malloc_unlock>
 8004320:	42a3      	cmp	r3, r4
 8004322:	d908      	bls.n	8004336 <_free_r+0x42>
 8004324:	6820      	ldr	r0, [r4, #0]
 8004326:	1821      	adds	r1, r4, r0
 8004328:	428b      	cmp	r3, r1
 800432a:	bf01      	itttt	eq
 800432c:	6819      	ldreq	r1, [r3, #0]
 800432e:	685b      	ldreq	r3, [r3, #4]
 8004330:	1809      	addeq	r1, r1, r0
 8004332:	6021      	streq	r1, [r4, #0]
 8004334:	e7ed      	b.n	8004312 <_free_r+0x1e>
 8004336:	461a      	mov	r2, r3
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	b10b      	cbz	r3, 8004340 <_free_r+0x4c>
 800433c:	42a3      	cmp	r3, r4
 800433e:	d9fa      	bls.n	8004336 <_free_r+0x42>
 8004340:	6811      	ldr	r1, [r2, #0]
 8004342:	1850      	adds	r0, r2, r1
 8004344:	42a0      	cmp	r0, r4
 8004346:	d10b      	bne.n	8004360 <_free_r+0x6c>
 8004348:	6820      	ldr	r0, [r4, #0]
 800434a:	4401      	add	r1, r0
 800434c:	1850      	adds	r0, r2, r1
 800434e:	4283      	cmp	r3, r0
 8004350:	6011      	str	r1, [r2, #0]
 8004352:	d1e0      	bne.n	8004316 <_free_r+0x22>
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4408      	add	r0, r1
 800435a:	6010      	str	r0, [r2, #0]
 800435c:	6053      	str	r3, [r2, #4]
 800435e:	e7da      	b.n	8004316 <_free_r+0x22>
 8004360:	d902      	bls.n	8004368 <_free_r+0x74>
 8004362:	230c      	movs	r3, #12
 8004364:	602b      	str	r3, [r5, #0]
 8004366:	e7d6      	b.n	8004316 <_free_r+0x22>
 8004368:	6820      	ldr	r0, [r4, #0]
 800436a:	1821      	adds	r1, r4, r0
 800436c:	428b      	cmp	r3, r1
 800436e:	bf01      	itttt	eq
 8004370:	6819      	ldreq	r1, [r3, #0]
 8004372:	685b      	ldreq	r3, [r3, #4]
 8004374:	1809      	addeq	r1, r1, r0
 8004376:	6021      	streq	r1, [r4, #0]
 8004378:	6063      	str	r3, [r4, #4]
 800437a:	6054      	str	r4, [r2, #4]
 800437c:	e7cb      	b.n	8004316 <_free_r+0x22>
 800437e:	bd38      	pop	{r3, r4, r5, pc}
 8004380:	200003a4 	.word	0x200003a4

08004384 <malloc>:
 8004384:	4b02      	ldr	r3, [pc, #8]	; (8004390 <malloc+0xc>)
 8004386:	4601      	mov	r1, r0
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	f000 b823 	b.w	80043d4 <_malloc_r>
 800438e:	bf00      	nop
 8004390:	20000070 	.word	0x20000070

08004394 <sbrk_aligned>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	4e0e      	ldr	r6, [pc, #56]	; (80043d0 <sbrk_aligned+0x3c>)
 8004398:	460c      	mov	r4, r1
 800439a:	6831      	ldr	r1, [r6, #0]
 800439c:	4605      	mov	r5, r0
 800439e:	b911      	cbnz	r1, 80043a6 <sbrk_aligned+0x12>
 80043a0:	f000 f9e4 	bl	800476c <_sbrk_r>
 80043a4:	6030      	str	r0, [r6, #0]
 80043a6:	4621      	mov	r1, r4
 80043a8:	4628      	mov	r0, r5
 80043aa:	f000 f9df 	bl	800476c <_sbrk_r>
 80043ae:	1c43      	adds	r3, r0, #1
 80043b0:	d00a      	beq.n	80043c8 <sbrk_aligned+0x34>
 80043b2:	1cc4      	adds	r4, r0, #3
 80043b4:	f024 0403 	bic.w	r4, r4, #3
 80043b8:	42a0      	cmp	r0, r4
 80043ba:	d007      	beq.n	80043cc <sbrk_aligned+0x38>
 80043bc:	1a21      	subs	r1, r4, r0
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 f9d4 	bl	800476c <_sbrk_r>
 80043c4:	3001      	adds	r0, #1
 80043c6:	d101      	bne.n	80043cc <sbrk_aligned+0x38>
 80043c8:	f04f 34ff 	mov.w	r4, #4294967295
 80043cc:	4620      	mov	r0, r4
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	200003a8 	.word	0x200003a8

080043d4 <_malloc_r>:
 80043d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043d8:	1ccd      	adds	r5, r1, #3
 80043da:	f025 0503 	bic.w	r5, r5, #3
 80043de:	3508      	adds	r5, #8
 80043e0:	2d0c      	cmp	r5, #12
 80043e2:	bf38      	it	cc
 80043e4:	250c      	movcc	r5, #12
 80043e6:	2d00      	cmp	r5, #0
 80043e8:	4607      	mov	r7, r0
 80043ea:	db01      	blt.n	80043f0 <_malloc_r+0x1c>
 80043ec:	42a9      	cmp	r1, r5
 80043ee:	d905      	bls.n	80043fc <_malloc_r+0x28>
 80043f0:	230c      	movs	r3, #12
 80043f2:	2600      	movs	r6, #0
 80043f4:	603b      	str	r3, [r7, #0]
 80043f6:	4630      	mov	r0, r6
 80043f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80044d0 <_malloc_r+0xfc>
 8004400:	f000 f868 	bl	80044d4 <__malloc_lock>
 8004404:	f8d8 3000 	ldr.w	r3, [r8]
 8004408:	461c      	mov	r4, r3
 800440a:	bb5c      	cbnz	r4, 8004464 <_malloc_r+0x90>
 800440c:	4629      	mov	r1, r5
 800440e:	4638      	mov	r0, r7
 8004410:	f7ff ffc0 	bl	8004394 <sbrk_aligned>
 8004414:	1c43      	adds	r3, r0, #1
 8004416:	4604      	mov	r4, r0
 8004418:	d155      	bne.n	80044c6 <_malloc_r+0xf2>
 800441a:	f8d8 4000 	ldr.w	r4, [r8]
 800441e:	4626      	mov	r6, r4
 8004420:	2e00      	cmp	r6, #0
 8004422:	d145      	bne.n	80044b0 <_malloc_r+0xdc>
 8004424:	2c00      	cmp	r4, #0
 8004426:	d048      	beq.n	80044ba <_malloc_r+0xe6>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	4631      	mov	r1, r6
 800442c:	4638      	mov	r0, r7
 800442e:	eb04 0903 	add.w	r9, r4, r3
 8004432:	f000 f99b 	bl	800476c <_sbrk_r>
 8004436:	4581      	cmp	r9, r0
 8004438:	d13f      	bne.n	80044ba <_malloc_r+0xe6>
 800443a:	6821      	ldr	r1, [r4, #0]
 800443c:	4638      	mov	r0, r7
 800443e:	1a6d      	subs	r5, r5, r1
 8004440:	4629      	mov	r1, r5
 8004442:	f7ff ffa7 	bl	8004394 <sbrk_aligned>
 8004446:	3001      	adds	r0, #1
 8004448:	d037      	beq.n	80044ba <_malloc_r+0xe6>
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	442b      	add	r3, r5
 800444e:	6023      	str	r3, [r4, #0]
 8004450:	f8d8 3000 	ldr.w	r3, [r8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d038      	beq.n	80044ca <_malloc_r+0xf6>
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	42a2      	cmp	r2, r4
 800445c:	d12b      	bne.n	80044b6 <_malloc_r+0xe2>
 800445e:	2200      	movs	r2, #0
 8004460:	605a      	str	r2, [r3, #4]
 8004462:	e00f      	b.n	8004484 <_malloc_r+0xb0>
 8004464:	6822      	ldr	r2, [r4, #0]
 8004466:	1b52      	subs	r2, r2, r5
 8004468:	d41f      	bmi.n	80044aa <_malloc_r+0xd6>
 800446a:	2a0b      	cmp	r2, #11
 800446c:	d917      	bls.n	800449e <_malloc_r+0xca>
 800446e:	1961      	adds	r1, r4, r5
 8004470:	42a3      	cmp	r3, r4
 8004472:	6025      	str	r5, [r4, #0]
 8004474:	bf18      	it	ne
 8004476:	6059      	strne	r1, [r3, #4]
 8004478:	6863      	ldr	r3, [r4, #4]
 800447a:	bf08      	it	eq
 800447c:	f8c8 1000 	streq.w	r1, [r8]
 8004480:	5162      	str	r2, [r4, r5]
 8004482:	604b      	str	r3, [r1, #4]
 8004484:	4638      	mov	r0, r7
 8004486:	f104 060b 	add.w	r6, r4, #11
 800448a:	f000 f829 	bl	80044e0 <__malloc_unlock>
 800448e:	f026 0607 	bic.w	r6, r6, #7
 8004492:	1d23      	adds	r3, r4, #4
 8004494:	1af2      	subs	r2, r6, r3
 8004496:	d0ae      	beq.n	80043f6 <_malloc_r+0x22>
 8004498:	1b9b      	subs	r3, r3, r6
 800449a:	50a3      	str	r3, [r4, r2]
 800449c:	e7ab      	b.n	80043f6 <_malloc_r+0x22>
 800449e:	42a3      	cmp	r3, r4
 80044a0:	6862      	ldr	r2, [r4, #4]
 80044a2:	d1dd      	bne.n	8004460 <_malloc_r+0x8c>
 80044a4:	f8c8 2000 	str.w	r2, [r8]
 80044a8:	e7ec      	b.n	8004484 <_malloc_r+0xb0>
 80044aa:	4623      	mov	r3, r4
 80044ac:	6864      	ldr	r4, [r4, #4]
 80044ae:	e7ac      	b.n	800440a <_malloc_r+0x36>
 80044b0:	4634      	mov	r4, r6
 80044b2:	6876      	ldr	r6, [r6, #4]
 80044b4:	e7b4      	b.n	8004420 <_malloc_r+0x4c>
 80044b6:	4613      	mov	r3, r2
 80044b8:	e7cc      	b.n	8004454 <_malloc_r+0x80>
 80044ba:	230c      	movs	r3, #12
 80044bc:	4638      	mov	r0, r7
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	f000 f80e 	bl	80044e0 <__malloc_unlock>
 80044c4:	e797      	b.n	80043f6 <_malloc_r+0x22>
 80044c6:	6025      	str	r5, [r4, #0]
 80044c8:	e7dc      	b.n	8004484 <_malloc_r+0xb0>
 80044ca:	605b      	str	r3, [r3, #4]
 80044cc:	deff      	udf	#255	; 0xff
 80044ce:	bf00      	nop
 80044d0:	200003a4 	.word	0x200003a4

080044d4 <__malloc_lock>:
 80044d4:	4801      	ldr	r0, [pc, #4]	; (80044dc <__malloc_lock+0x8>)
 80044d6:	f7ff beec 	b.w	80042b2 <__retarget_lock_acquire_recursive>
 80044da:	bf00      	nop
 80044dc:	200003a0 	.word	0x200003a0

080044e0 <__malloc_unlock>:
 80044e0:	4801      	ldr	r0, [pc, #4]	; (80044e8 <__malloc_unlock+0x8>)
 80044e2:	f7ff bee7 	b.w	80042b4 <__retarget_lock_release_recursive>
 80044e6:	bf00      	nop
 80044e8:	200003a0 	.word	0x200003a0

080044ec <__sflush_r>:
 80044ec:	898a      	ldrh	r2, [r1, #12]
 80044ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f0:	4605      	mov	r5, r0
 80044f2:	0710      	lsls	r0, r2, #28
 80044f4:	460c      	mov	r4, r1
 80044f6:	d457      	bmi.n	80045a8 <__sflush_r+0xbc>
 80044f8:	684b      	ldr	r3, [r1, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	dc04      	bgt.n	8004508 <__sflush_r+0x1c>
 80044fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004500:	2b00      	cmp	r3, #0
 8004502:	dc01      	bgt.n	8004508 <__sflush_r+0x1c>
 8004504:	2000      	movs	r0, #0
 8004506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004508:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800450a:	2e00      	cmp	r6, #0
 800450c:	d0fa      	beq.n	8004504 <__sflush_r+0x18>
 800450e:	2300      	movs	r3, #0
 8004510:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004514:	682f      	ldr	r7, [r5, #0]
 8004516:	6a21      	ldr	r1, [r4, #32]
 8004518:	602b      	str	r3, [r5, #0]
 800451a:	d032      	beq.n	8004582 <__sflush_r+0x96>
 800451c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800451e:	89a3      	ldrh	r3, [r4, #12]
 8004520:	075a      	lsls	r2, r3, #29
 8004522:	d505      	bpl.n	8004530 <__sflush_r+0x44>
 8004524:	6863      	ldr	r3, [r4, #4]
 8004526:	1ac0      	subs	r0, r0, r3
 8004528:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800452a:	b10b      	cbz	r3, 8004530 <__sflush_r+0x44>
 800452c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800452e:	1ac0      	subs	r0, r0, r3
 8004530:	2300      	movs	r3, #0
 8004532:	4602      	mov	r2, r0
 8004534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004536:	4628      	mov	r0, r5
 8004538:	6a21      	ldr	r1, [r4, #32]
 800453a:	47b0      	blx	r6
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	d106      	bne.n	8004550 <__sflush_r+0x64>
 8004542:	6829      	ldr	r1, [r5, #0]
 8004544:	291d      	cmp	r1, #29
 8004546:	d82b      	bhi.n	80045a0 <__sflush_r+0xb4>
 8004548:	4a28      	ldr	r2, [pc, #160]	; (80045ec <__sflush_r+0x100>)
 800454a:	410a      	asrs	r2, r1
 800454c:	07d6      	lsls	r6, r2, #31
 800454e:	d427      	bmi.n	80045a0 <__sflush_r+0xb4>
 8004550:	2200      	movs	r2, #0
 8004552:	6062      	str	r2, [r4, #4]
 8004554:	6922      	ldr	r2, [r4, #16]
 8004556:	04d9      	lsls	r1, r3, #19
 8004558:	6022      	str	r2, [r4, #0]
 800455a:	d504      	bpl.n	8004566 <__sflush_r+0x7a>
 800455c:	1c42      	adds	r2, r0, #1
 800455e:	d101      	bne.n	8004564 <__sflush_r+0x78>
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	b903      	cbnz	r3, 8004566 <__sflush_r+0x7a>
 8004564:	6560      	str	r0, [r4, #84]	; 0x54
 8004566:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004568:	602f      	str	r7, [r5, #0]
 800456a:	2900      	cmp	r1, #0
 800456c:	d0ca      	beq.n	8004504 <__sflush_r+0x18>
 800456e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004572:	4299      	cmp	r1, r3
 8004574:	d002      	beq.n	800457c <__sflush_r+0x90>
 8004576:	4628      	mov	r0, r5
 8004578:	f7ff febc 	bl	80042f4 <_free_r>
 800457c:	2000      	movs	r0, #0
 800457e:	6360      	str	r0, [r4, #52]	; 0x34
 8004580:	e7c1      	b.n	8004506 <__sflush_r+0x1a>
 8004582:	2301      	movs	r3, #1
 8004584:	4628      	mov	r0, r5
 8004586:	47b0      	blx	r6
 8004588:	1c41      	adds	r1, r0, #1
 800458a:	d1c8      	bne.n	800451e <__sflush_r+0x32>
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0c5      	beq.n	800451e <__sflush_r+0x32>
 8004592:	2b1d      	cmp	r3, #29
 8004594:	d001      	beq.n	800459a <__sflush_r+0xae>
 8004596:	2b16      	cmp	r3, #22
 8004598:	d101      	bne.n	800459e <__sflush_r+0xb2>
 800459a:	602f      	str	r7, [r5, #0]
 800459c:	e7b2      	b.n	8004504 <__sflush_r+0x18>
 800459e:	89a3      	ldrh	r3, [r4, #12]
 80045a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a4:	81a3      	strh	r3, [r4, #12]
 80045a6:	e7ae      	b.n	8004506 <__sflush_r+0x1a>
 80045a8:	690f      	ldr	r7, [r1, #16]
 80045aa:	2f00      	cmp	r7, #0
 80045ac:	d0aa      	beq.n	8004504 <__sflush_r+0x18>
 80045ae:	0793      	lsls	r3, r2, #30
 80045b0:	bf18      	it	ne
 80045b2:	2300      	movne	r3, #0
 80045b4:	680e      	ldr	r6, [r1, #0]
 80045b6:	bf08      	it	eq
 80045b8:	694b      	ldreq	r3, [r1, #20]
 80045ba:	1bf6      	subs	r6, r6, r7
 80045bc:	600f      	str	r7, [r1, #0]
 80045be:	608b      	str	r3, [r1, #8]
 80045c0:	2e00      	cmp	r6, #0
 80045c2:	dd9f      	ble.n	8004504 <__sflush_r+0x18>
 80045c4:	4633      	mov	r3, r6
 80045c6:	463a      	mov	r2, r7
 80045c8:	4628      	mov	r0, r5
 80045ca:	6a21      	ldr	r1, [r4, #32]
 80045cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80045d0:	47e0      	blx	ip
 80045d2:	2800      	cmp	r0, #0
 80045d4:	dc06      	bgt.n	80045e4 <__sflush_r+0xf8>
 80045d6:	89a3      	ldrh	r3, [r4, #12]
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295
 80045dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045e0:	81a3      	strh	r3, [r4, #12]
 80045e2:	e790      	b.n	8004506 <__sflush_r+0x1a>
 80045e4:	4407      	add	r7, r0
 80045e6:	1a36      	subs	r6, r6, r0
 80045e8:	e7ea      	b.n	80045c0 <__sflush_r+0xd4>
 80045ea:	bf00      	nop
 80045ec:	dfbffffe 	.word	0xdfbffffe

080045f0 <_fflush_r>:
 80045f0:	b538      	push	{r3, r4, r5, lr}
 80045f2:	690b      	ldr	r3, [r1, #16]
 80045f4:	4605      	mov	r5, r0
 80045f6:	460c      	mov	r4, r1
 80045f8:	b913      	cbnz	r3, 8004600 <_fflush_r+0x10>
 80045fa:	2500      	movs	r5, #0
 80045fc:	4628      	mov	r0, r5
 80045fe:	bd38      	pop	{r3, r4, r5, pc}
 8004600:	b118      	cbz	r0, 800460a <_fflush_r+0x1a>
 8004602:	6a03      	ldr	r3, [r0, #32]
 8004604:	b90b      	cbnz	r3, 800460a <_fflush_r+0x1a>
 8004606:	f7ff fc71 	bl	8003eec <__sinit>
 800460a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f3      	beq.n	80045fa <_fflush_r+0xa>
 8004612:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004614:	07d0      	lsls	r0, r2, #31
 8004616:	d404      	bmi.n	8004622 <_fflush_r+0x32>
 8004618:	0599      	lsls	r1, r3, #22
 800461a:	d402      	bmi.n	8004622 <_fflush_r+0x32>
 800461c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800461e:	f7ff fe48 	bl	80042b2 <__retarget_lock_acquire_recursive>
 8004622:	4628      	mov	r0, r5
 8004624:	4621      	mov	r1, r4
 8004626:	f7ff ff61 	bl	80044ec <__sflush_r>
 800462a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800462c:	4605      	mov	r5, r0
 800462e:	07da      	lsls	r2, r3, #31
 8004630:	d4e4      	bmi.n	80045fc <_fflush_r+0xc>
 8004632:	89a3      	ldrh	r3, [r4, #12]
 8004634:	059b      	lsls	r3, r3, #22
 8004636:	d4e1      	bmi.n	80045fc <_fflush_r+0xc>
 8004638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800463a:	f7ff fe3b 	bl	80042b4 <__retarget_lock_release_recursive>
 800463e:	e7dd      	b.n	80045fc <_fflush_r+0xc>

08004640 <fiprintf>:
 8004640:	b40e      	push	{r1, r2, r3}
 8004642:	b503      	push	{r0, r1, lr}
 8004644:	4601      	mov	r1, r0
 8004646:	ab03      	add	r3, sp, #12
 8004648:	4805      	ldr	r0, [pc, #20]	; (8004660 <fiprintf+0x20>)
 800464a:	f853 2b04 	ldr.w	r2, [r3], #4
 800464e:	6800      	ldr	r0, [r0, #0]
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	f000 f8c9 	bl	80047e8 <_vfiprintf_r>
 8004656:	b002      	add	sp, #8
 8004658:	f85d eb04 	ldr.w	lr, [sp], #4
 800465c:	b003      	add	sp, #12
 800465e:	4770      	bx	lr
 8004660:	20000070 	.word	0x20000070

08004664 <__swhatbuf_r>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	460c      	mov	r4, r1
 8004668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800466c:	4615      	mov	r5, r2
 800466e:	2900      	cmp	r1, #0
 8004670:	461e      	mov	r6, r3
 8004672:	b096      	sub	sp, #88	; 0x58
 8004674:	da0c      	bge.n	8004690 <__swhatbuf_r+0x2c>
 8004676:	89a3      	ldrh	r3, [r4, #12]
 8004678:	2100      	movs	r1, #0
 800467a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800467e:	bf0c      	ite	eq
 8004680:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004684:	2340      	movne	r3, #64	; 0x40
 8004686:	2000      	movs	r0, #0
 8004688:	6031      	str	r1, [r6, #0]
 800468a:	602b      	str	r3, [r5, #0]
 800468c:	b016      	add	sp, #88	; 0x58
 800468e:	bd70      	pop	{r4, r5, r6, pc}
 8004690:	466a      	mov	r2, sp
 8004692:	f000 f849 	bl	8004728 <_fstat_r>
 8004696:	2800      	cmp	r0, #0
 8004698:	dbed      	blt.n	8004676 <__swhatbuf_r+0x12>
 800469a:	9901      	ldr	r1, [sp, #4]
 800469c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80046a0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80046a4:	4259      	negs	r1, r3
 80046a6:	4159      	adcs	r1, r3
 80046a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ac:	e7eb      	b.n	8004686 <__swhatbuf_r+0x22>

080046ae <__smakebuf_r>:
 80046ae:	898b      	ldrh	r3, [r1, #12]
 80046b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046b2:	079d      	lsls	r5, r3, #30
 80046b4:	4606      	mov	r6, r0
 80046b6:	460c      	mov	r4, r1
 80046b8:	d507      	bpl.n	80046ca <__smakebuf_r+0x1c>
 80046ba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046be:	6023      	str	r3, [r4, #0]
 80046c0:	6123      	str	r3, [r4, #16]
 80046c2:	2301      	movs	r3, #1
 80046c4:	6163      	str	r3, [r4, #20]
 80046c6:	b002      	add	sp, #8
 80046c8:	bd70      	pop	{r4, r5, r6, pc}
 80046ca:	466a      	mov	r2, sp
 80046cc:	ab01      	add	r3, sp, #4
 80046ce:	f7ff ffc9 	bl	8004664 <__swhatbuf_r>
 80046d2:	9900      	ldr	r1, [sp, #0]
 80046d4:	4605      	mov	r5, r0
 80046d6:	4630      	mov	r0, r6
 80046d8:	f7ff fe7c 	bl	80043d4 <_malloc_r>
 80046dc:	b948      	cbnz	r0, 80046f2 <__smakebuf_r+0x44>
 80046de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046e2:	059a      	lsls	r2, r3, #22
 80046e4:	d4ef      	bmi.n	80046c6 <__smakebuf_r+0x18>
 80046e6:	f023 0303 	bic.w	r3, r3, #3
 80046ea:	f043 0302 	orr.w	r3, r3, #2
 80046ee:	81a3      	strh	r3, [r4, #12]
 80046f0:	e7e3      	b.n	80046ba <__smakebuf_r+0xc>
 80046f2:	89a3      	ldrh	r3, [r4, #12]
 80046f4:	6020      	str	r0, [r4, #0]
 80046f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fa:	81a3      	strh	r3, [r4, #12]
 80046fc:	9b00      	ldr	r3, [sp, #0]
 80046fe:	6120      	str	r0, [r4, #16]
 8004700:	6163      	str	r3, [r4, #20]
 8004702:	9b01      	ldr	r3, [sp, #4]
 8004704:	b15b      	cbz	r3, 800471e <__smakebuf_r+0x70>
 8004706:	4630      	mov	r0, r6
 8004708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800470c:	f000 f81e 	bl	800474c <_isatty_r>
 8004710:	b128      	cbz	r0, 800471e <__smakebuf_r+0x70>
 8004712:	89a3      	ldrh	r3, [r4, #12]
 8004714:	f023 0303 	bic.w	r3, r3, #3
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	81a3      	strh	r3, [r4, #12]
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	431d      	orrs	r5, r3
 8004722:	81a5      	strh	r5, [r4, #12]
 8004724:	e7cf      	b.n	80046c6 <__smakebuf_r+0x18>
	...

08004728 <_fstat_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	2300      	movs	r3, #0
 800472c:	4d06      	ldr	r5, [pc, #24]	; (8004748 <_fstat_r+0x20>)
 800472e:	4604      	mov	r4, r0
 8004730:	4608      	mov	r0, r1
 8004732:	4611      	mov	r1, r2
 8004734:	602b      	str	r3, [r5, #0]
 8004736:	f7fc fb26 	bl	8000d86 <_fstat>
 800473a:	1c43      	adds	r3, r0, #1
 800473c:	d102      	bne.n	8004744 <_fstat_r+0x1c>
 800473e:	682b      	ldr	r3, [r5, #0]
 8004740:	b103      	cbz	r3, 8004744 <_fstat_r+0x1c>
 8004742:	6023      	str	r3, [r4, #0]
 8004744:	bd38      	pop	{r3, r4, r5, pc}
 8004746:	bf00      	nop
 8004748:	2000039c 	.word	0x2000039c

0800474c <_isatty_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	2300      	movs	r3, #0
 8004750:	4d05      	ldr	r5, [pc, #20]	; (8004768 <_isatty_r+0x1c>)
 8004752:	4604      	mov	r4, r0
 8004754:	4608      	mov	r0, r1
 8004756:	602b      	str	r3, [r5, #0]
 8004758:	f7fc fb24 	bl	8000da4 <_isatty>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	d102      	bne.n	8004766 <_isatty_r+0x1a>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	b103      	cbz	r3, 8004766 <_isatty_r+0x1a>
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	bd38      	pop	{r3, r4, r5, pc}
 8004768:	2000039c 	.word	0x2000039c

0800476c <_sbrk_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	2300      	movs	r3, #0
 8004770:	4d05      	ldr	r5, [pc, #20]	; (8004788 <_sbrk_r+0x1c>)
 8004772:	4604      	mov	r4, r0
 8004774:	4608      	mov	r0, r1
 8004776:	602b      	str	r3, [r5, #0]
 8004778:	f7fc fb2a 	bl	8000dd0 <_sbrk>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d102      	bne.n	8004786 <_sbrk_r+0x1a>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	b103      	cbz	r3, 8004786 <_sbrk_r+0x1a>
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	bd38      	pop	{r3, r4, r5, pc}
 8004788:	2000039c 	.word	0x2000039c

0800478c <abort>:
 800478c:	2006      	movs	r0, #6
 800478e:	b508      	push	{r3, lr}
 8004790:	f000 fb00 	bl	8004d94 <raise>
 8004794:	2001      	movs	r0, #1
 8004796:	f7fc faa8 	bl	8000cea <_exit>

0800479a <__sfputc_r>:
 800479a:	6893      	ldr	r3, [r2, #8]
 800479c:	b410      	push	{r4}
 800479e:	3b01      	subs	r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	6093      	str	r3, [r2, #8]
 80047a4:	da07      	bge.n	80047b6 <__sfputc_r+0x1c>
 80047a6:	6994      	ldr	r4, [r2, #24]
 80047a8:	42a3      	cmp	r3, r4
 80047aa:	db01      	blt.n	80047b0 <__sfputc_r+0x16>
 80047ac:	290a      	cmp	r1, #10
 80047ae:	d102      	bne.n	80047b6 <__sfputc_r+0x1c>
 80047b0:	bc10      	pop	{r4}
 80047b2:	f7ff bc70 	b.w	8004096 <__swbuf_r>
 80047b6:	6813      	ldr	r3, [r2, #0]
 80047b8:	1c58      	adds	r0, r3, #1
 80047ba:	6010      	str	r0, [r2, #0]
 80047bc:	7019      	strb	r1, [r3, #0]
 80047be:	4608      	mov	r0, r1
 80047c0:	bc10      	pop	{r4}
 80047c2:	4770      	bx	lr

080047c4 <__sfputs_r>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	4606      	mov	r6, r0
 80047c8:	460f      	mov	r7, r1
 80047ca:	4614      	mov	r4, r2
 80047cc:	18d5      	adds	r5, r2, r3
 80047ce:	42ac      	cmp	r4, r5
 80047d0:	d101      	bne.n	80047d6 <__sfputs_r+0x12>
 80047d2:	2000      	movs	r0, #0
 80047d4:	e007      	b.n	80047e6 <__sfputs_r+0x22>
 80047d6:	463a      	mov	r2, r7
 80047d8:	4630      	mov	r0, r6
 80047da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047de:	f7ff ffdc 	bl	800479a <__sfputc_r>
 80047e2:	1c43      	adds	r3, r0, #1
 80047e4:	d1f3      	bne.n	80047ce <__sfputs_r+0xa>
 80047e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080047e8 <_vfiprintf_r>:
 80047e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ec:	460d      	mov	r5, r1
 80047ee:	4614      	mov	r4, r2
 80047f0:	4698      	mov	r8, r3
 80047f2:	4606      	mov	r6, r0
 80047f4:	b09d      	sub	sp, #116	; 0x74
 80047f6:	b118      	cbz	r0, 8004800 <_vfiprintf_r+0x18>
 80047f8:	6a03      	ldr	r3, [r0, #32]
 80047fa:	b90b      	cbnz	r3, 8004800 <_vfiprintf_r+0x18>
 80047fc:	f7ff fb76 	bl	8003eec <__sinit>
 8004800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004802:	07d9      	lsls	r1, r3, #31
 8004804:	d405      	bmi.n	8004812 <_vfiprintf_r+0x2a>
 8004806:	89ab      	ldrh	r3, [r5, #12]
 8004808:	059a      	lsls	r2, r3, #22
 800480a:	d402      	bmi.n	8004812 <_vfiprintf_r+0x2a>
 800480c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800480e:	f7ff fd50 	bl	80042b2 <__retarget_lock_acquire_recursive>
 8004812:	89ab      	ldrh	r3, [r5, #12]
 8004814:	071b      	lsls	r3, r3, #28
 8004816:	d501      	bpl.n	800481c <_vfiprintf_r+0x34>
 8004818:	692b      	ldr	r3, [r5, #16]
 800481a:	b99b      	cbnz	r3, 8004844 <_vfiprintf_r+0x5c>
 800481c:	4629      	mov	r1, r5
 800481e:	4630      	mov	r0, r6
 8004820:	f7ff fc76 	bl	8004110 <__swsetup_r>
 8004824:	b170      	cbz	r0, 8004844 <_vfiprintf_r+0x5c>
 8004826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004828:	07dc      	lsls	r4, r3, #31
 800482a:	d504      	bpl.n	8004836 <_vfiprintf_r+0x4e>
 800482c:	f04f 30ff 	mov.w	r0, #4294967295
 8004830:	b01d      	add	sp, #116	; 0x74
 8004832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004836:	89ab      	ldrh	r3, [r5, #12]
 8004838:	0598      	lsls	r0, r3, #22
 800483a:	d4f7      	bmi.n	800482c <_vfiprintf_r+0x44>
 800483c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800483e:	f7ff fd39 	bl	80042b4 <__retarget_lock_release_recursive>
 8004842:	e7f3      	b.n	800482c <_vfiprintf_r+0x44>
 8004844:	2300      	movs	r3, #0
 8004846:	9309      	str	r3, [sp, #36]	; 0x24
 8004848:	2320      	movs	r3, #32
 800484a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800484e:	2330      	movs	r3, #48	; 0x30
 8004850:	f04f 0901 	mov.w	r9, #1
 8004854:	f8cd 800c 	str.w	r8, [sp, #12]
 8004858:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004a08 <_vfiprintf_r+0x220>
 800485c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004860:	4623      	mov	r3, r4
 8004862:	469a      	mov	sl, r3
 8004864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004868:	b10a      	cbz	r2, 800486e <_vfiprintf_r+0x86>
 800486a:	2a25      	cmp	r2, #37	; 0x25
 800486c:	d1f9      	bne.n	8004862 <_vfiprintf_r+0x7a>
 800486e:	ebba 0b04 	subs.w	fp, sl, r4
 8004872:	d00b      	beq.n	800488c <_vfiprintf_r+0xa4>
 8004874:	465b      	mov	r3, fp
 8004876:	4622      	mov	r2, r4
 8004878:	4629      	mov	r1, r5
 800487a:	4630      	mov	r0, r6
 800487c:	f7ff ffa2 	bl	80047c4 <__sfputs_r>
 8004880:	3001      	adds	r0, #1
 8004882:	f000 80a9 	beq.w	80049d8 <_vfiprintf_r+0x1f0>
 8004886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004888:	445a      	add	r2, fp
 800488a:	9209      	str	r2, [sp, #36]	; 0x24
 800488c:	f89a 3000 	ldrb.w	r3, [sl]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80a1 	beq.w	80049d8 <_vfiprintf_r+0x1f0>
 8004896:	2300      	movs	r3, #0
 8004898:	f04f 32ff 	mov.w	r2, #4294967295
 800489c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048a0:	f10a 0a01 	add.w	sl, sl, #1
 80048a4:	9304      	str	r3, [sp, #16]
 80048a6:	9307      	str	r3, [sp, #28]
 80048a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048ac:	931a      	str	r3, [sp, #104]	; 0x68
 80048ae:	4654      	mov	r4, sl
 80048b0:	2205      	movs	r2, #5
 80048b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048b6:	4854      	ldr	r0, [pc, #336]	; (8004a08 <_vfiprintf_r+0x220>)
 80048b8:	f000 fa88 	bl	8004dcc <memchr>
 80048bc:	9a04      	ldr	r2, [sp, #16]
 80048be:	b9d8      	cbnz	r0, 80048f8 <_vfiprintf_r+0x110>
 80048c0:	06d1      	lsls	r1, r2, #27
 80048c2:	bf44      	itt	mi
 80048c4:	2320      	movmi	r3, #32
 80048c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048ca:	0713      	lsls	r3, r2, #28
 80048cc:	bf44      	itt	mi
 80048ce:	232b      	movmi	r3, #43	; 0x2b
 80048d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048d4:	f89a 3000 	ldrb.w	r3, [sl]
 80048d8:	2b2a      	cmp	r3, #42	; 0x2a
 80048da:	d015      	beq.n	8004908 <_vfiprintf_r+0x120>
 80048dc:	4654      	mov	r4, sl
 80048de:	2000      	movs	r0, #0
 80048e0:	f04f 0c0a 	mov.w	ip, #10
 80048e4:	9a07      	ldr	r2, [sp, #28]
 80048e6:	4621      	mov	r1, r4
 80048e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048ec:	3b30      	subs	r3, #48	; 0x30
 80048ee:	2b09      	cmp	r3, #9
 80048f0:	d94d      	bls.n	800498e <_vfiprintf_r+0x1a6>
 80048f2:	b1b0      	cbz	r0, 8004922 <_vfiprintf_r+0x13a>
 80048f4:	9207      	str	r2, [sp, #28]
 80048f6:	e014      	b.n	8004922 <_vfiprintf_r+0x13a>
 80048f8:	eba0 0308 	sub.w	r3, r0, r8
 80048fc:	fa09 f303 	lsl.w	r3, r9, r3
 8004900:	4313      	orrs	r3, r2
 8004902:	46a2      	mov	sl, r4
 8004904:	9304      	str	r3, [sp, #16]
 8004906:	e7d2      	b.n	80048ae <_vfiprintf_r+0xc6>
 8004908:	9b03      	ldr	r3, [sp, #12]
 800490a:	1d19      	adds	r1, r3, #4
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	9103      	str	r1, [sp, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	bfbb      	ittet	lt
 8004914:	425b      	neglt	r3, r3
 8004916:	f042 0202 	orrlt.w	r2, r2, #2
 800491a:	9307      	strge	r3, [sp, #28]
 800491c:	9307      	strlt	r3, [sp, #28]
 800491e:	bfb8      	it	lt
 8004920:	9204      	strlt	r2, [sp, #16]
 8004922:	7823      	ldrb	r3, [r4, #0]
 8004924:	2b2e      	cmp	r3, #46	; 0x2e
 8004926:	d10c      	bne.n	8004942 <_vfiprintf_r+0x15a>
 8004928:	7863      	ldrb	r3, [r4, #1]
 800492a:	2b2a      	cmp	r3, #42	; 0x2a
 800492c:	d134      	bne.n	8004998 <_vfiprintf_r+0x1b0>
 800492e:	9b03      	ldr	r3, [sp, #12]
 8004930:	3402      	adds	r4, #2
 8004932:	1d1a      	adds	r2, r3, #4
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	9203      	str	r2, [sp, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	bfb8      	it	lt
 800493c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004940:	9305      	str	r3, [sp, #20]
 8004942:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a0c <_vfiprintf_r+0x224>
 8004946:	2203      	movs	r2, #3
 8004948:	4650      	mov	r0, sl
 800494a:	7821      	ldrb	r1, [r4, #0]
 800494c:	f000 fa3e 	bl	8004dcc <memchr>
 8004950:	b138      	cbz	r0, 8004962 <_vfiprintf_r+0x17a>
 8004952:	2240      	movs	r2, #64	; 0x40
 8004954:	9b04      	ldr	r3, [sp, #16]
 8004956:	eba0 000a 	sub.w	r0, r0, sl
 800495a:	4082      	lsls	r2, r0
 800495c:	4313      	orrs	r3, r2
 800495e:	3401      	adds	r4, #1
 8004960:	9304      	str	r3, [sp, #16]
 8004962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004966:	2206      	movs	r2, #6
 8004968:	4829      	ldr	r0, [pc, #164]	; (8004a10 <_vfiprintf_r+0x228>)
 800496a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800496e:	f000 fa2d 	bl	8004dcc <memchr>
 8004972:	2800      	cmp	r0, #0
 8004974:	d03f      	beq.n	80049f6 <_vfiprintf_r+0x20e>
 8004976:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <_vfiprintf_r+0x22c>)
 8004978:	bb1b      	cbnz	r3, 80049c2 <_vfiprintf_r+0x1da>
 800497a:	9b03      	ldr	r3, [sp, #12]
 800497c:	3307      	adds	r3, #7
 800497e:	f023 0307 	bic.w	r3, r3, #7
 8004982:	3308      	adds	r3, #8
 8004984:	9303      	str	r3, [sp, #12]
 8004986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004988:	443b      	add	r3, r7
 800498a:	9309      	str	r3, [sp, #36]	; 0x24
 800498c:	e768      	b.n	8004860 <_vfiprintf_r+0x78>
 800498e:	460c      	mov	r4, r1
 8004990:	2001      	movs	r0, #1
 8004992:	fb0c 3202 	mla	r2, ip, r2, r3
 8004996:	e7a6      	b.n	80048e6 <_vfiprintf_r+0xfe>
 8004998:	2300      	movs	r3, #0
 800499a:	f04f 0c0a 	mov.w	ip, #10
 800499e:	4619      	mov	r1, r3
 80049a0:	3401      	adds	r4, #1
 80049a2:	9305      	str	r3, [sp, #20]
 80049a4:	4620      	mov	r0, r4
 80049a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049aa:	3a30      	subs	r2, #48	; 0x30
 80049ac:	2a09      	cmp	r2, #9
 80049ae:	d903      	bls.n	80049b8 <_vfiprintf_r+0x1d0>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0c6      	beq.n	8004942 <_vfiprintf_r+0x15a>
 80049b4:	9105      	str	r1, [sp, #20]
 80049b6:	e7c4      	b.n	8004942 <_vfiprintf_r+0x15a>
 80049b8:	4604      	mov	r4, r0
 80049ba:	2301      	movs	r3, #1
 80049bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80049c0:	e7f0      	b.n	80049a4 <_vfiprintf_r+0x1bc>
 80049c2:	ab03      	add	r3, sp, #12
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	462a      	mov	r2, r5
 80049c8:	4630      	mov	r0, r6
 80049ca:	4b13      	ldr	r3, [pc, #76]	; (8004a18 <_vfiprintf_r+0x230>)
 80049cc:	a904      	add	r1, sp, #16
 80049ce:	f3af 8000 	nop.w
 80049d2:	4607      	mov	r7, r0
 80049d4:	1c78      	adds	r0, r7, #1
 80049d6:	d1d6      	bne.n	8004986 <_vfiprintf_r+0x19e>
 80049d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049da:	07d9      	lsls	r1, r3, #31
 80049dc:	d405      	bmi.n	80049ea <_vfiprintf_r+0x202>
 80049de:	89ab      	ldrh	r3, [r5, #12]
 80049e0:	059a      	lsls	r2, r3, #22
 80049e2:	d402      	bmi.n	80049ea <_vfiprintf_r+0x202>
 80049e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049e6:	f7ff fc65 	bl	80042b4 <__retarget_lock_release_recursive>
 80049ea:	89ab      	ldrh	r3, [r5, #12]
 80049ec:	065b      	lsls	r3, r3, #25
 80049ee:	f53f af1d 	bmi.w	800482c <_vfiprintf_r+0x44>
 80049f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049f4:	e71c      	b.n	8004830 <_vfiprintf_r+0x48>
 80049f6:	ab03      	add	r3, sp, #12
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	462a      	mov	r2, r5
 80049fc:	4630      	mov	r0, r6
 80049fe:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <_vfiprintf_r+0x230>)
 8004a00:	a904      	add	r1, sp, #16
 8004a02:	f000 f87d 	bl	8004b00 <_printf_i>
 8004a06:	e7e4      	b.n	80049d2 <_vfiprintf_r+0x1ea>
 8004a08:	08004edd 	.word	0x08004edd
 8004a0c:	08004ee3 	.word	0x08004ee3
 8004a10:	08004ee7 	.word	0x08004ee7
 8004a14:	00000000 	.word	0x00000000
 8004a18:	080047c5 	.word	0x080047c5

08004a1c <_printf_common>:
 8004a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a20:	4616      	mov	r6, r2
 8004a22:	4699      	mov	r9, r3
 8004a24:	688a      	ldr	r2, [r1, #8]
 8004a26:	690b      	ldr	r3, [r1, #16]
 8004a28:	4607      	mov	r7, r0
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	bfb8      	it	lt
 8004a2e:	4613      	movlt	r3, r2
 8004a30:	6033      	str	r3, [r6, #0]
 8004a32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a36:	460c      	mov	r4, r1
 8004a38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a3c:	b10a      	cbz	r2, 8004a42 <_printf_common+0x26>
 8004a3e:	3301      	adds	r3, #1
 8004a40:	6033      	str	r3, [r6, #0]
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	0699      	lsls	r1, r3, #26
 8004a46:	bf42      	ittt	mi
 8004a48:	6833      	ldrmi	r3, [r6, #0]
 8004a4a:	3302      	addmi	r3, #2
 8004a4c:	6033      	strmi	r3, [r6, #0]
 8004a4e:	6825      	ldr	r5, [r4, #0]
 8004a50:	f015 0506 	ands.w	r5, r5, #6
 8004a54:	d106      	bne.n	8004a64 <_printf_common+0x48>
 8004a56:	f104 0a19 	add.w	sl, r4, #25
 8004a5a:	68e3      	ldr	r3, [r4, #12]
 8004a5c:	6832      	ldr	r2, [r6, #0]
 8004a5e:	1a9b      	subs	r3, r3, r2
 8004a60:	42ab      	cmp	r3, r5
 8004a62:	dc2b      	bgt.n	8004abc <_printf_common+0xa0>
 8004a64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a68:	1e13      	subs	r3, r2, #0
 8004a6a:	6822      	ldr	r2, [r4, #0]
 8004a6c:	bf18      	it	ne
 8004a6e:	2301      	movne	r3, #1
 8004a70:	0692      	lsls	r2, r2, #26
 8004a72:	d430      	bmi.n	8004ad6 <_printf_common+0xba>
 8004a74:	4649      	mov	r1, r9
 8004a76:	4638      	mov	r0, r7
 8004a78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a7c:	47c0      	blx	r8
 8004a7e:	3001      	adds	r0, #1
 8004a80:	d023      	beq.n	8004aca <_printf_common+0xae>
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	6922      	ldr	r2, [r4, #16]
 8004a86:	f003 0306 	and.w	r3, r3, #6
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	bf14      	ite	ne
 8004a8e:	2500      	movne	r5, #0
 8004a90:	6833      	ldreq	r3, [r6, #0]
 8004a92:	f04f 0600 	mov.w	r6, #0
 8004a96:	bf08      	it	eq
 8004a98:	68e5      	ldreq	r5, [r4, #12]
 8004a9a:	f104 041a 	add.w	r4, r4, #26
 8004a9e:	bf08      	it	eq
 8004aa0:	1aed      	subeq	r5, r5, r3
 8004aa2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004aa6:	bf08      	it	eq
 8004aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004aac:	4293      	cmp	r3, r2
 8004aae:	bfc4      	itt	gt
 8004ab0:	1a9b      	subgt	r3, r3, r2
 8004ab2:	18ed      	addgt	r5, r5, r3
 8004ab4:	42b5      	cmp	r5, r6
 8004ab6:	d11a      	bne.n	8004aee <_printf_common+0xd2>
 8004ab8:	2000      	movs	r0, #0
 8004aba:	e008      	b.n	8004ace <_printf_common+0xb2>
 8004abc:	2301      	movs	r3, #1
 8004abe:	4652      	mov	r2, sl
 8004ac0:	4649      	mov	r1, r9
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	47c0      	blx	r8
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	d103      	bne.n	8004ad2 <_printf_common+0xb6>
 8004aca:	f04f 30ff 	mov.w	r0, #4294967295
 8004ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad2:	3501      	adds	r5, #1
 8004ad4:	e7c1      	b.n	8004a5a <_printf_common+0x3e>
 8004ad6:	2030      	movs	r0, #48	; 0x30
 8004ad8:	18e1      	adds	r1, r4, r3
 8004ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ae4:	4422      	add	r2, r4
 8004ae6:	3302      	adds	r3, #2
 8004ae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004aec:	e7c2      	b.n	8004a74 <_printf_common+0x58>
 8004aee:	2301      	movs	r3, #1
 8004af0:	4622      	mov	r2, r4
 8004af2:	4649      	mov	r1, r9
 8004af4:	4638      	mov	r0, r7
 8004af6:	47c0      	blx	r8
 8004af8:	3001      	adds	r0, #1
 8004afa:	d0e6      	beq.n	8004aca <_printf_common+0xae>
 8004afc:	3601      	adds	r6, #1
 8004afe:	e7d9      	b.n	8004ab4 <_printf_common+0x98>

08004b00 <_printf_i>:
 8004b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b04:	7e0f      	ldrb	r7, [r1, #24]
 8004b06:	4691      	mov	r9, r2
 8004b08:	2f78      	cmp	r7, #120	; 0x78
 8004b0a:	4680      	mov	r8, r0
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	469a      	mov	sl, r3
 8004b10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b16:	d807      	bhi.n	8004b28 <_printf_i+0x28>
 8004b18:	2f62      	cmp	r7, #98	; 0x62
 8004b1a:	d80a      	bhi.n	8004b32 <_printf_i+0x32>
 8004b1c:	2f00      	cmp	r7, #0
 8004b1e:	f000 80d5 	beq.w	8004ccc <_printf_i+0x1cc>
 8004b22:	2f58      	cmp	r7, #88	; 0x58
 8004b24:	f000 80c1 	beq.w	8004caa <_printf_i+0x1aa>
 8004b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b30:	e03a      	b.n	8004ba8 <_printf_i+0xa8>
 8004b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b36:	2b15      	cmp	r3, #21
 8004b38:	d8f6      	bhi.n	8004b28 <_printf_i+0x28>
 8004b3a:	a101      	add	r1, pc, #4	; (adr r1, 8004b40 <_printf_i+0x40>)
 8004b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b40:	08004b99 	.word	0x08004b99
 8004b44:	08004bad 	.word	0x08004bad
 8004b48:	08004b29 	.word	0x08004b29
 8004b4c:	08004b29 	.word	0x08004b29
 8004b50:	08004b29 	.word	0x08004b29
 8004b54:	08004b29 	.word	0x08004b29
 8004b58:	08004bad 	.word	0x08004bad
 8004b5c:	08004b29 	.word	0x08004b29
 8004b60:	08004b29 	.word	0x08004b29
 8004b64:	08004b29 	.word	0x08004b29
 8004b68:	08004b29 	.word	0x08004b29
 8004b6c:	08004cb3 	.word	0x08004cb3
 8004b70:	08004bd9 	.word	0x08004bd9
 8004b74:	08004c6d 	.word	0x08004c6d
 8004b78:	08004b29 	.word	0x08004b29
 8004b7c:	08004b29 	.word	0x08004b29
 8004b80:	08004cd5 	.word	0x08004cd5
 8004b84:	08004b29 	.word	0x08004b29
 8004b88:	08004bd9 	.word	0x08004bd9
 8004b8c:	08004b29 	.word	0x08004b29
 8004b90:	08004b29 	.word	0x08004b29
 8004b94:	08004c75 	.word	0x08004c75
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	1d1a      	adds	r2, r3, #4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	602a      	str	r2, [r5, #0]
 8004ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e0a0      	b.n	8004cee <_printf_i+0x1ee>
 8004bac:	6820      	ldr	r0, [r4, #0]
 8004bae:	682b      	ldr	r3, [r5, #0]
 8004bb0:	0607      	lsls	r7, r0, #24
 8004bb2:	f103 0104 	add.w	r1, r3, #4
 8004bb6:	6029      	str	r1, [r5, #0]
 8004bb8:	d501      	bpl.n	8004bbe <_printf_i+0xbe>
 8004bba:	681e      	ldr	r6, [r3, #0]
 8004bbc:	e003      	b.n	8004bc6 <_printf_i+0xc6>
 8004bbe:	0646      	lsls	r6, r0, #25
 8004bc0:	d5fb      	bpl.n	8004bba <_printf_i+0xba>
 8004bc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004bc6:	2e00      	cmp	r6, #0
 8004bc8:	da03      	bge.n	8004bd2 <_printf_i+0xd2>
 8004bca:	232d      	movs	r3, #45	; 0x2d
 8004bcc:	4276      	negs	r6, r6
 8004bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bd2:	230a      	movs	r3, #10
 8004bd4:	4859      	ldr	r0, [pc, #356]	; (8004d3c <_printf_i+0x23c>)
 8004bd6:	e012      	b.n	8004bfe <_printf_i+0xfe>
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	6820      	ldr	r0, [r4, #0]
 8004bdc:	1d19      	adds	r1, r3, #4
 8004bde:	6029      	str	r1, [r5, #0]
 8004be0:	0605      	lsls	r5, r0, #24
 8004be2:	d501      	bpl.n	8004be8 <_printf_i+0xe8>
 8004be4:	681e      	ldr	r6, [r3, #0]
 8004be6:	e002      	b.n	8004bee <_printf_i+0xee>
 8004be8:	0641      	lsls	r1, r0, #25
 8004bea:	d5fb      	bpl.n	8004be4 <_printf_i+0xe4>
 8004bec:	881e      	ldrh	r6, [r3, #0]
 8004bee:	2f6f      	cmp	r7, #111	; 0x6f
 8004bf0:	bf0c      	ite	eq
 8004bf2:	2308      	moveq	r3, #8
 8004bf4:	230a      	movne	r3, #10
 8004bf6:	4851      	ldr	r0, [pc, #324]	; (8004d3c <_printf_i+0x23c>)
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bfe:	6865      	ldr	r5, [r4, #4]
 8004c00:	2d00      	cmp	r5, #0
 8004c02:	bfa8      	it	ge
 8004c04:	6821      	ldrge	r1, [r4, #0]
 8004c06:	60a5      	str	r5, [r4, #8]
 8004c08:	bfa4      	itt	ge
 8004c0a:	f021 0104 	bicge.w	r1, r1, #4
 8004c0e:	6021      	strge	r1, [r4, #0]
 8004c10:	b90e      	cbnz	r6, 8004c16 <_printf_i+0x116>
 8004c12:	2d00      	cmp	r5, #0
 8004c14:	d04b      	beq.n	8004cae <_printf_i+0x1ae>
 8004c16:	4615      	mov	r5, r2
 8004c18:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c1c:	fb03 6711 	mls	r7, r3, r1, r6
 8004c20:	5dc7      	ldrb	r7, [r0, r7]
 8004c22:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c26:	4637      	mov	r7, r6
 8004c28:	42bb      	cmp	r3, r7
 8004c2a:	460e      	mov	r6, r1
 8004c2c:	d9f4      	bls.n	8004c18 <_printf_i+0x118>
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d10b      	bne.n	8004c4a <_printf_i+0x14a>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	07de      	lsls	r6, r3, #31
 8004c36:	d508      	bpl.n	8004c4a <_printf_i+0x14a>
 8004c38:	6923      	ldr	r3, [r4, #16]
 8004c3a:	6861      	ldr	r1, [r4, #4]
 8004c3c:	4299      	cmp	r1, r3
 8004c3e:	bfde      	ittt	le
 8004c40:	2330      	movle	r3, #48	; 0x30
 8004c42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c4a:	1b52      	subs	r2, r2, r5
 8004c4c:	6122      	str	r2, [r4, #16]
 8004c4e:	464b      	mov	r3, r9
 8004c50:	4621      	mov	r1, r4
 8004c52:	4640      	mov	r0, r8
 8004c54:	f8cd a000 	str.w	sl, [sp]
 8004c58:	aa03      	add	r2, sp, #12
 8004c5a:	f7ff fedf 	bl	8004a1c <_printf_common>
 8004c5e:	3001      	adds	r0, #1
 8004c60:	d14a      	bne.n	8004cf8 <_printf_i+0x1f8>
 8004c62:	f04f 30ff 	mov.w	r0, #4294967295
 8004c66:	b004      	add	sp, #16
 8004c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	f043 0320 	orr.w	r3, r3, #32
 8004c72:	6023      	str	r3, [r4, #0]
 8004c74:	2778      	movs	r7, #120	; 0x78
 8004c76:	4832      	ldr	r0, [pc, #200]	; (8004d40 <_printf_i+0x240>)
 8004c78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	6829      	ldr	r1, [r5, #0]
 8004c80:	061f      	lsls	r7, r3, #24
 8004c82:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c86:	d402      	bmi.n	8004c8e <_printf_i+0x18e>
 8004c88:	065f      	lsls	r7, r3, #25
 8004c8a:	bf48      	it	mi
 8004c8c:	b2b6      	uxthmi	r6, r6
 8004c8e:	07df      	lsls	r7, r3, #31
 8004c90:	bf48      	it	mi
 8004c92:	f043 0320 	orrmi.w	r3, r3, #32
 8004c96:	6029      	str	r1, [r5, #0]
 8004c98:	bf48      	it	mi
 8004c9a:	6023      	strmi	r3, [r4, #0]
 8004c9c:	b91e      	cbnz	r6, 8004ca6 <_printf_i+0x1a6>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	f023 0320 	bic.w	r3, r3, #32
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	2310      	movs	r3, #16
 8004ca8:	e7a6      	b.n	8004bf8 <_printf_i+0xf8>
 8004caa:	4824      	ldr	r0, [pc, #144]	; (8004d3c <_printf_i+0x23c>)
 8004cac:	e7e4      	b.n	8004c78 <_printf_i+0x178>
 8004cae:	4615      	mov	r5, r2
 8004cb0:	e7bd      	b.n	8004c2e <_printf_i+0x12e>
 8004cb2:	682b      	ldr	r3, [r5, #0]
 8004cb4:	6826      	ldr	r6, [r4, #0]
 8004cb6:	1d18      	adds	r0, r3, #4
 8004cb8:	6961      	ldr	r1, [r4, #20]
 8004cba:	6028      	str	r0, [r5, #0]
 8004cbc:	0635      	lsls	r5, r6, #24
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	d501      	bpl.n	8004cc6 <_printf_i+0x1c6>
 8004cc2:	6019      	str	r1, [r3, #0]
 8004cc4:	e002      	b.n	8004ccc <_printf_i+0x1cc>
 8004cc6:	0670      	lsls	r0, r6, #25
 8004cc8:	d5fb      	bpl.n	8004cc2 <_printf_i+0x1c2>
 8004cca:	8019      	strh	r1, [r3, #0]
 8004ccc:	2300      	movs	r3, #0
 8004cce:	4615      	mov	r5, r2
 8004cd0:	6123      	str	r3, [r4, #16]
 8004cd2:	e7bc      	b.n	8004c4e <_printf_i+0x14e>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	1d1a      	adds	r2, r3, #4
 8004cda:	602a      	str	r2, [r5, #0]
 8004cdc:	681d      	ldr	r5, [r3, #0]
 8004cde:	6862      	ldr	r2, [r4, #4]
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	f000 f873 	bl	8004dcc <memchr>
 8004ce6:	b108      	cbz	r0, 8004cec <_printf_i+0x1ec>
 8004ce8:	1b40      	subs	r0, r0, r5
 8004cea:	6060      	str	r0, [r4, #4]
 8004cec:	6863      	ldr	r3, [r4, #4]
 8004cee:	6123      	str	r3, [r4, #16]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cf6:	e7aa      	b.n	8004c4e <_printf_i+0x14e>
 8004cf8:	462a      	mov	r2, r5
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	6923      	ldr	r3, [r4, #16]
 8004d00:	47d0      	blx	sl
 8004d02:	3001      	adds	r0, #1
 8004d04:	d0ad      	beq.n	8004c62 <_printf_i+0x162>
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	079b      	lsls	r3, r3, #30
 8004d0a:	d413      	bmi.n	8004d34 <_printf_i+0x234>
 8004d0c:	68e0      	ldr	r0, [r4, #12]
 8004d0e:	9b03      	ldr	r3, [sp, #12]
 8004d10:	4298      	cmp	r0, r3
 8004d12:	bfb8      	it	lt
 8004d14:	4618      	movlt	r0, r3
 8004d16:	e7a6      	b.n	8004c66 <_printf_i+0x166>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	4632      	mov	r2, r6
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	4640      	mov	r0, r8
 8004d20:	47d0      	blx	sl
 8004d22:	3001      	adds	r0, #1
 8004d24:	d09d      	beq.n	8004c62 <_printf_i+0x162>
 8004d26:	3501      	adds	r5, #1
 8004d28:	68e3      	ldr	r3, [r4, #12]
 8004d2a:	9903      	ldr	r1, [sp, #12]
 8004d2c:	1a5b      	subs	r3, r3, r1
 8004d2e:	42ab      	cmp	r3, r5
 8004d30:	dcf2      	bgt.n	8004d18 <_printf_i+0x218>
 8004d32:	e7eb      	b.n	8004d0c <_printf_i+0x20c>
 8004d34:	2500      	movs	r5, #0
 8004d36:	f104 0619 	add.w	r6, r4, #25
 8004d3a:	e7f5      	b.n	8004d28 <_printf_i+0x228>
 8004d3c:	08004eee 	.word	0x08004eee
 8004d40:	08004eff 	.word	0x08004eff

08004d44 <_raise_r>:
 8004d44:	291f      	cmp	r1, #31
 8004d46:	b538      	push	{r3, r4, r5, lr}
 8004d48:	4604      	mov	r4, r0
 8004d4a:	460d      	mov	r5, r1
 8004d4c:	d904      	bls.n	8004d58 <_raise_r+0x14>
 8004d4e:	2316      	movs	r3, #22
 8004d50:	6003      	str	r3, [r0, #0]
 8004d52:	f04f 30ff 	mov.w	r0, #4294967295
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
 8004d58:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004d5a:	b112      	cbz	r2, 8004d62 <_raise_r+0x1e>
 8004d5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d60:	b94b      	cbnz	r3, 8004d76 <_raise_r+0x32>
 8004d62:	4620      	mov	r0, r4
 8004d64:	f000 f830 	bl	8004dc8 <_getpid_r>
 8004d68:	462a      	mov	r2, r5
 8004d6a:	4601      	mov	r1, r0
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d72:	f000 b817 	b.w	8004da4 <_kill_r>
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d00a      	beq.n	8004d90 <_raise_r+0x4c>
 8004d7a:	1c59      	adds	r1, r3, #1
 8004d7c:	d103      	bne.n	8004d86 <_raise_r+0x42>
 8004d7e:	2316      	movs	r3, #22
 8004d80:	6003      	str	r3, [r0, #0]
 8004d82:	2001      	movs	r0, #1
 8004d84:	e7e7      	b.n	8004d56 <_raise_r+0x12>
 8004d86:	2400      	movs	r4, #0
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004d8e:	4798      	blx	r3
 8004d90:	2000      	movs	r0, #0
 8004d92:	e7e0      	b.n	8004d56 <_raise_r+0x12>

08004d94 <raise>:
 8004d94:	4b02      	ldr	r3, [pc, #8]	; (8004da0 <raise+0xc>)
 8004d96:	4601      	mov	r1, r0
 8004d98:	6818      	ldr	r0, [r3, #0]
 8004d9a:	f7ff bfd3 	b.w	8004d44 <_raise_r>
 8004d9e:	bf00      	nop
 8004da0:	20000070 	.word	0x20000070

08004da4 <_kill_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	2300      	movs	r3, #0
 8004da8:	4d06      	ldr	r5, [pc, #24]	; (8004dc4 <_kill_r+0x20>)
 8004daa:	4604      	mov	r4, r0
 8004dac:	4608      	mov	r0, r1
 8004dae:	4611      	mov	r1, r2
 8004db0:	602b      	str	r3, [r5, #0]
 8004db2:	f7fb ff8a 	bl	8000cca <_kill>
 8004db6:	1c43      	adds	r3, r0, #1
 8004db8:	d102      	bne.n	8004dc0 <_kill_r+0x1c>
 8004dba:	682b      	ldr	r3, [r5, #0]
 8004dbc:	b103      	cbz	r3, 8004dc0 <_kill_r+0x1c>
 8004dbe:	6023      	str	r3, [r4, #0]
 8004dc0:	bd38      	pop	{r3, r4, r5, pc}
 8004dc2:	bf00      	nop
 8004dc4:	2000039c 	.word	0x2000039c

08004dc8 <_getpid_r>:
 8004dc8:	f7fb bf78 	b.w	8000cbc <_getpid>

08004dcc <memchr>:
 8004dcc:	4603      	mov	r3, r0
 8004dce:	b510      	push	{r4, lr}
 8004dd0:	b2c9      	uxtb	r1, r1
 8004dd2:	4402      	add	r2, r0
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	d101      	bne.n	8004dde <memchr+0x12>
 8004dda:	2000      	movs	r0, #0
 8004ddc:	e003      	b.n	8004de6 <memchr+0x1a>
 8004dde:	7804      	ldrb	r4, [r0, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	428c      	cmp	r4, r1
 8004de4:	d1f6      	bne.n	8004dd4 <memchr+0x8>
 8004de6:	bd10      	pop	{r4, pc}

08004de8 <_init>:
 8004de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dea:	bf00      	nop
 8004dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dee:	bc08      	pop	{r3}
 8004df0:	469e      	mov	lr, r3
 8004df2:	4770      	bx	lr

08004df4 <_fini>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	bf00      	nop
 8004df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfa:	bc08      	pop	{r3}
 8004dfc:	469e      	mov	lr, r3
 8004dfe:	4770      	bx	lr
